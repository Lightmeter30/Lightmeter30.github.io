<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java Socket通信详解</title>
      <link href="/2022/06/26/Java-Socket%E9%80%9A%E4%BF%A1%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/06/26/Java-Socket%E9%80%9A%E4%BF%A1%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>最近在写的Java大作业中需要用到Java Socket通信，本文章在作业实践的基础上，将实践中学习的Socket通信的相关基础知识和遇到的难点进行记录和分析，并且给出解决办法。下面就是正片力！</p><h2 id="Socket是个什么东东？"><a href="#Socket是个什么东东？" class="headerlink" title="Socket是个什么东东？"></a>Socket是个什么东东？</h2><p>Socket的英文含义为插座，可谓是生动形象了。因为socket就像一个电话插座，负责联通两端的电话，进行点对点通信，此时端口就像插座上面的孔，端口不能同时被其它进程占用。而我们建立连接就像把插头插在插座上，这样在创建一个Socket实例开始监听接口后，这个电话插座就时刻监听消息的传入，谁连接上我的IP地址和端口，我就与其建立联系。</p><h2 id="Socket通信基本原理"><a href="#Socket通信基本原理" class="headerlink" title="Socket通信基本原理"></a>Socket通信基本原理</h2><p>Socket是基于应用服务与TCP&#x2F;IP通信之间的一个抽象。Socket将TCP&#x2F;IP通信协议里面复杂的通信逻辑进行了封装，因此对用户来说，只需要使用Socket提供的方法就可以实现网络的连接与通信。客户端和服务端之间使用Socket通信的流程图如下所示。<br><img src="https://s2.loli.net/2022/06/26/2w98aqkMlgxY5KI.png" alt="Socket通信图.png"></p><p>首先，服务器端初始化ServerSocket，然后对指定的端口进行监听，通过调用<code>Accept()</code>方法进行阻塞，此时，如果客户端有一个我socket连接到服务端，那么服务端通过监听和<code>Accept()</code>方法可以与客户端进行连接。</p><h2 id="Socket通信中最基本的代码示例"><a href="#Socket通信中最基本的代码示例" class="headerlink" title="Socket通信中最基本的代码示例"></a>Socket通信中最基本的代码示例</h2><p>通过前两个部分对于Socket的讲解，相信你已经对Socket通信的基本原理已经有所了解，现在我们就开始愉快地敲代码吧！</p><div class="tabs" id="code1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#code1-1">服务端</button></li><li class="tab"><button type="button" data-href="#code1-2">客户端</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="code1-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="comment">//服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerSocketTest</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化服务端socket并且绑定9999端口</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line">        <span class="comment">//等待客户端的连接</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">        <span class="comment">//获取输入流</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line">        <span class="comment">//读取一行数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> bufferedReader.readLine();</span><br><span class="line">        <span class="comment">//输出打印</span></span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="code1-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientSocket</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">9999</span>);</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(socket.getOutputStream()));</span><br><span class="line">        String str=<span class="string">&quot;你好，这是我的第一个socket&quot;</span>;</span><br><span class="line">        bufferedWriter.write(str);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>将代码复制并且运行，首先启动服务端ServerSocket的main函数，发现一切正常，其在等待客户端的连接：</p><p><img src="https://s2.loli.net/2022/06/26/Sn9YvsKrNoHbRUT.png" alt="服务端终端输出1.png"></p><p>然后再启动客户端，发现客户端可以正常启动，执行完之后马上关闭，同时服务端控制台报出以下错误：</p><p><img src="https://s2.loli.net/2022/06/26/Zyvg2XdtoAIHMOB.png" alt="服务端终端输出2.png"></p><p>出现如上报错的原因如下：首先socket通信时阻塞的，其会在以下几个地方进行阻塞：首先是<code>accept()</code>方法，服务端调用此方法后，会一直阻塞在那里，直到有客户端申请连接服务端；第二个是<code>read()</code>方法，调用<code>read()</code>方法也可以进行阻塞。通过以上代码实例可以发现，这个报错的罪魁祸首其实就是服务端的<code>read()</code>方法。首先通过调试功能测试客户端的运行没有问题，客户端确确实实把信息发送出去了。因此问题一定在服务端上面。当服务端调用<code>read()</code>方法后，它就会一直阻塞在那里，直到客户端把数据发送完毕。但是在这个代码示例中客户端并没有给服务端一个标识，使得服务端能够判断客户端消息是否已经发送完毕，所以在客户端关闭之后服务端依旧阻塞在<code>read()</code>方法处等待客户端的数据，因此才会报错<code>java.net.SocketException: Connection reset</code>。</p><p>当然解决上面的问题方法其实很简单，只需要我们能够在客户端传输消息完毕后给服务端一个标识证明信息传输完成，那么服务端就可以正常工作了。而完成这种功能的方法通常有下面两种：</p><ul><li><code>socket.close()</code>：关闭socket连接，此时如果服务端给客户端反馈信息的话，由于socket连接已经关闭，此时客户端是收不到的。</li><li><code>socket.shutdownOutput()</code>：该方法只是关闭输出流，不会关闭socket连接，所以客户端依旧可以收到服务端的反馈信息。</li></ul><p>因此只要我们在以上代码中客户端的部分增加一个标识就行了。更新后的代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientSocket</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">9999</span>);</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(socket.getOutputStream()));</span><br><span class="line">        String str=<span class="string">&quot;你好，这是我的第一个socket&quot;</span>;</span><br><span class="line">        bufferedWriter.write(str);</span><br><span class="line">        <span class="comment">// 刷新输入流</span></span><br><span class="line">        bufferedWriter.flush();</span><br><span class="line">        <span class="comment">//关闭socket的输出流</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先后运行服务端和客户端后，客户端正常结束，服务端的终端输出如下所示：</p><p><img src="https://s2.loli.net/2022/06/26/hpu39nPKvjgyE6W.png" alt="服务端终端输出3.png"></p><p>通过分析以上案例，相信聪明的你已经基本了解了socket的通信原理了吧，下面就让我们来了解一些socket通信进阶版的写法吧。</p><h2 id="Socket通信实现连续接受客户端信息"><a href="#Socket通信实现连续接受客户端信息" class="headerlink" title="Socket通信实现连续接受客户端信息"></a>Socket通信实现连续接受客户端信息</h2><p>上面的代码示例中的socket客户端和服务端固然可以实现通信但是每次客户端发送消息后socket都会关闭，这显然和我们平时用到的在线聊天软件的功能差了十万八千里，毕竟没有什么软件需要在每次发送消息前都要登录。那么如何才能让我们的程序中的客户端可以连续给服务器端发送消息呢？答案是通过在服务端和客户端添加<code>while()</code>循环来实现这个功能。</p><div class="tabs" id="code2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#code2-1">服务端</button></li><li class="tab"><button type="button" data-href="#code2-2">客户端</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="code2-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="comment">//服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerSocketTest</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化服务端socket并且绑定9999端口</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line">        <span class="comment">//等待客户端的连接</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">        <span class="comment">//获取输入流</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream(),<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        <span class="comment">//读取一行数据</span></span><br><span class="line">        String str;</span><br><span class="line">        <span class="comment">//通过while循环不断读取打印信息</span></span><br><span class="line">        <span class="keyword">while</span>((str = bufferedReader.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//打印输出信息</span></span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="code2-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientSocket</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String str;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">9999</span>);</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(socket.getOutputStream()));</span><br><span class="line">        <span class="comment">//通过标准输入流获取字符流</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            str = bufferedReader.readLine();</span><br><span class="line">            bufferedWriter.write(str);</span><br><span class="line">            bufferedWriter.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            bufferedWriter.flush();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>先后启动服务端和客户端，在客户端控制台输入信息，即可在服务端控制台查看到相关消息。</p><ul><li>客户端控制台输入：</li></ul><p><img src="https://s2.loli.net/2022/06/26/kWCvYF8UuKJH4MS.png" alt="客户端输入1.png"></p><ul><li>服务端控制台输出：</li></ul><p><img src="https://s2.loli.net/2022/06/26/JHhxjiAPYsTWF3O.png" alt="服务端控制台输出4.png"></p><p>通过如上两个图，我们可以看到通过<code>while()</code>循环就可以实现客户端不间断地通过标准输入流读取消息，并且发送给服务端。此时你或许会注意到，这次客户端中没有写<code>socket.close()</code>方法或<code>socket.shutdownOutput()</code>方法，那么服务端是怎么样判断客户端已经输入完成了呢？其实程序是通过客户端和用户端双方事先约定好一个标识符，当客户端发送这个标识符给服务端时，就表明客户端已经完成一个数据的传输。而在服务端接收数据的时候，也会通过这个标识符来判断，如果接收到这个标识符，就说明一次数据传输已经完成，那么服务端就可以放手干后面的活儿了。</p><p>比如说在上面地实例中，客户端每发送一行数据时，都会在最后增加一个标识符”\n”，告诉服务端数据已经传输完成。然后又通过<code>while((str = bufferedReader.readLine())!=null)</code>去判断是否读到了流的结尾，负责将服务端一直阻塞在这里，等待客户端数据传输完成。</p><p>当你看到这儿，恭喜你已经可以通过<code>while()</code>循环来实现多个客户端和服务端进行聊天了，可喜可贺！但是还是存在一些问题，我们之前讨论过socket的通信是阻塞式的，所以就会存在以下问题：假如说存在客户端A和客户端B，它们同时连接到服务端上，当客户端A发送的信息被服务端接收后，那么服务端将会一直被阻塞在客户端A上面，通过循环一直读取A的输入，假如此时用户端B尝试传输数据，就会被加入到阻塞队列中，直到服务端处理完客户端A传输的信息时，服务端才能建立与客户端B的通信。因此我们此时写的程序在事实上只是实现了客户端与服务端一对一的功能，因为只有在客户端A关闭后，客户端B才能和服务端建立连接，这明显不是我们想要的。</p><h2 id="多线程下的Socket通信"><a href="#多线程下的Socket通信" class="headerlink" title="多线程下的Socket通信"></a>多线程下的Socket通信</h2><p>为了解决上面所说的问题，实现真正意义上的多客户端与服务端的连接，我们将采用多线程的方法实现Socket通信。</p><div class="tabs" id="code3"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#code3-1">服务端</button></li><li class="tab"><button type="button" data-href="#code3-2">客户端</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="code3-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="comment">//服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerSocketTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//初始化服务器端并且绑定9999端口</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">//等待客户端连接</span></span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">            <span class="comment">//对于每一个进来的客户端都创建一个线程进行处理</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">                    <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        bufferedReader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream(),<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                        <span class="comment">//读取一行数据</span></span><br><span class="line">                        String str;</span><br><span class="line">                        <span class="comment">//通过循环不断获取客户端传输过来的信息</span></span><br><span class="line">                        <span class="keyword">while</span>((str = bufferedReader.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;客户端说：&quot;</span>+str);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="code3-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientSocket</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 初始化服务</span></span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">9999</span>);</span><br><span class="line">            <span class="comment">//通过socket获取字符流</span></span><br><span class="line">            <span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(socket.getOutputStream()));</span><br><span class="line">            <span class="comment">//通过标准输入获取字符流</span></span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> bufferedReader.readLine();</span><br><span class="line">                bufferedWriter.write(str);</span><br><span class="line">                bufferedWriter.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                bufferedWriter.flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>开启服务端后再开启两个客户端，分别输入一些信息后控制台输出如下所示：</p><p><img src="https://s2.loli.net/2022/06/26/6lYazqUfhWMBFp5.png" alt="服务端控制台输出5.png"></p><p>通过这个实例测试我们发现，这时我们的程序中，客户端A和客户端B再同时连接到服务器端后，都可以与服务端进行通信，这样就杜绝了之前出现的A和B不能同时与服务端进行通信的情况。实现这种的功能的主要功臣就是服务端会为每一个请求连接的客户端创建一个单独的线程，与客户端进行数据交互，这样就保证了每个客户端处理数据时都是单独的，不会出现互相阻塞的情况，这样的话我们就实现了多对多的基本聊天功能了，可喜可贺！</p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习笔记</title>
      <link href="/2022/05/09/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/05/09/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><h3 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h3><h3 id="编程小技巧"><a href="#编程小技巧" class="headerlink" title="编程小技巧"></a>编程小技巧</h3><ul><li>如何打空格: 使用<code>&amp;nbsp;</code>即可在页面中显示空格(注意分号┭┮﹏┭┮)</li></ul><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><p>CSS中的盒子模型如下图所示:<br><img src="https://s2.loli.net/2022/05/09/kBuqSKvbzJHFMIP.png" alt="盒子模型"></p><h3 id="CSS定位"><a href="#CSS定位" class="headerlink" title="CSS定位"></a>CSS定位</h3><p>CSS中的定位用于对页面中的元素进行布局,常见的定位有以下几种:</p><ol><li>静态定位(static)<br>一般标签元素在不加任何定位属性时都属于静态定位,属于标准流。</li><li>绝对定位(absolute)<br>绝对定位会将指定元素从文档流中拿出,再通过位移属性相对于其最近的已定位祖先元素。<div class="note info simple"><p>因为绝对定位的框与文档流无关，所以它们可以覆盖页面上的其它元素。可以通过设置 z-index 属性来控制这些框的堆放次序。</p></div></li><li>相对定位(relate)<br>相对定位是相对于该元素在正常文件流中的位置,通过设置的位移属性计算得到。<div class="note warning simple"><p>该元素仍然保持其未定位前的形状，它原本所占的空间仍保留</p></div></li><li>固定定位(fixed)<br>与绝对定位类似,但它是相对于浏览器窗口定位,不会随滚动条进行滚动。</li><li>粘性定位(sticky)<br>粘性定位可以被认为是相对定位和固定定位的混合。简单来说，在滑动过程中，某个元素距离其父元素的距离达到 sticky粘性定位的要求时(比如top：100px)；position:sticky这时的效果相当于fixed定位，固定到适当位置</li></ol>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue框架学习</title>
      <link href="/2022/05/08/post/"/>
      <url>/2022/05/08/post/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue基础语法"><a href="#Vue基础语法" class="headerlink" title="Vue基础语法"></a>Vue基础语法</h2><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><p>  Vue中的数据绑定有以下两种方式:</p><ol><li>单向绑定(v-bind): 数据只能从data流向页面,当data中被绑定变量的内容改变时,这种改变会实时展示在页面上。</li><li>双向绑定(v-model): 数据在data和页面之间双向流通。</li></ol><div class="note warning simple"><p>双向绑定一般都应用在表单元素上(input,select等)</p></div><div class="note info simple"><p>v-model:value 可以简写成v-model,因为v-model默认收集的就是value值</p></div><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><h4 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h4><p>Vue主要使用<mark class="hl-label red">v-on</mark> 监听事件,调用相应函数对用户的交互作出回应。<br>以下为事件处理的基本要点:</p><ol><li>使用<code>v-on:xxx</code>或<code>@xxx</code>来绑定事件,其中<mark class="hl-label blue">xxx</mark> 是事件名</li><li>事件的函数需要配置在methods对象中,最终在vm上</li><li>methods对象中的函数都在Vue的管理之下,因此函数中的<mark class="hl-label orange">this</mark> 指向的是vm或组件的实例对象</li><li><code>@click=&quot;demo&quot;</code>和<code>@click=&quot;demo($event)&quot;</code>效果一致,但是后者可以传参</li></ol><h5 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h5><p>Vue中的事件修饰符:</p><ol><li>.prevent: 阻止默认事件;</li><li>.stop: 阻止事件冒泡;</li><li>.once: 事件只触发一次;</li><li>.capture: 使用事件的捕获模式;</li><li>.self: 只有event.target是当前操作的元素时才能触发事件;</li><li>.passive: 事件默认立即执行,无需等待事件回调执行完毕;</li></ol><p>前三个事件修饰符是常用的,可以重点记一下。</p><h5 id="Vue中常用的按键别名"><a href="#Vue中常用的按键别名" class="headerlink" title="Vue中常用的按键别名"></a>Vue中常用的按键别名</h5><ol><li>回车: enter</li><li>删除: delete(捕获”删除”和”退格”)</li><li>退出: esc</li><li>空格: space</li><li>换行: tab(必须配合keydown使用)</li><li>上: up</li><li>下: down</li><li>左: left</li><li>右: right</li></ol><h5 id="Vue中的系统修饰键-ctrl-alt-shift-meta"><a href="#Vue中的系统修饰键-ctrl-alt-shift-meta" class="headerlink" title="Vue中的系统修饰键:ctrl,alt,shift,meta"></a>Vue中的系统修饰键:ctrl,alt,shift,meta</h5><ol><li>配合keyup使用: 按下修饰键的同时,再按下其他键,随后释放其他键,才会触发绑定事件</li><li>配合keydown使用: 正常触发绑定事件</li></ol><div class="note info simple"><p>Vue中未提供别名的按键,可以使用按键原始的key值去绑定,格式为kebab-case(短横线命名)</p></div>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板测试</title>
      <link href="/2022/05/06/%E6%A8%A1%E6%9D%BF%E6%B5%8B%E8%AF%95/"/>
      <url>/2022/05/06/%E6%A8%A1%E6%9D%BF%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="模板测试"><a href="#模板测试" class="headerlink" title="模板测试"></a>模板测试</h2><p>首先啊即可完成放不开九八七六五的海南</p><p>扣1送地狱火<br>111大哥真送吗？</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>这是我的第一篇博客</title>
      <link href="/2022/05/06/testBlog/"/>
      <url>/2022/05/06/testBlog/</url>
      
        <content type="html"><![CDATA[<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="博客更新代码"><a href="#博客更新代码" class="headerlink" title="博客更新代码"></a>博客更新代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  //清除缓存</span><br><span class="line">hexo g      //生成网站静态文件到默认设置的 public 文件夹</span><br><span class="line">hexo d      //自动部署到设定的仓库</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/05/06/hello-world/"/>
      <url>/2022/05/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
