<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java Socket通信详解</title>
      <link href="/2022/06/26/Java-Socket%E9%80%9A%E4%BF%A1%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/06/26/Java-Socket%E9%80%9A%E4%BF%A1%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>最近在写的Java大作业中需要用到Java Socket通信，本文章在作业实践的基础上，将实践中学习的Socket通信的相关基础知识和遇到的难点进行记录和分析，并且给出解决办法。下面就是正片力！</p><h2 id="Socket是个什么东东？"><a href="#Socket是个什么东东？" class="headerlink" title="Socket是个什么东东？"></a>Socket是个什么东东？</h2><p>Socket的英文含义为插座，可谓是生动形象了。因为socket就像一个电话插座，负责联通两端的电话，进行点对点通信，此时端口就像插座上面的孔，端口不能同时被其它进程占用。而我们建立连接就像把插头插在插座上，这样在创建一个Socket实例开始监听接口后，这个电话插座就时刻监听消息的传入，谁连接上我的IP地址和端口，我就与其建立联系。</p><h2 id="Socket通信基本原理"><a href="#Socket通信基本原理" class="headerlink" title="Socket通信基本原理"></a>Socket通信基本原理</h2><p>Socket是基于应用服务与TCP&#x2F;IP通信之间的一个抽象。Socket将TCP&#x2F;IP通信协议里面复杂的通信逻辑进行了封装，因此对用户来说，只需要使用Socket提供的方法就可以实现网络的连接与通信。客户端和服务端之间使用Socket通信的流程图如下所示。<br><img src="https://s2.loli.net/2022/06/26/2w98aqkMlgxY5KI.png" alt="Socket通信图.png"></p><p>首先，服务器端初始化ServerSocket，然后对指定的端口进行监听，通过调用<code>Accept()</code>方法进行阻塞，此时，如果客户端有一个我socket连接到服务端，那么服务端通过监听和<code>Accept()</code>方法可以与客户端进行连接。</p><h2 id="Socket通信中最基本的代码示例"><a href="#Socket通信中最基本的代码示例" class="headerlink" title="Socket通信中最基本的代码示例"></a>Socket通信中最基本的代码示例</h2><p>通过前两个部分对于Socket的讲解，相信你已经对Socket通信的基本原理已经有所了解，现在我们就开始愉快地敲代码吧！</p><div class="tabs" id="code1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#code1-1">服务端</button></li><li class="tab"><button type="button" data-href="#code1-2">客户端</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="code1-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="comment">//服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerSocketTest</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化服务端socket并且绑定9999端口</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span>  <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line">        <span class="comment">//等待客户端的连接</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">        <span class="comment">//获取输入流</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line">        <span class="comment">//读取一行数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> bufferedReader.readLine();</span><br><span class="line">        <span class="comment">//输出打印</span></span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="code1-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientSocket</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">9999</span>);</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(socket.getOutputStream()));</span><br><span class="line">        String str=<span class="string">&quot;你好，这是我的第一个socket&quot;</span>;</span><br><span class="line">        bufferedWriter.write(str);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 这是一篇有关Java Socket通信原理的分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习笔记</title>
      <link href="/2022/05/09/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/05/09/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><h3 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h3><h3 id="编程小技巧"><a href="#编程小技巧" class="headerlink" title="编程小技巧"></a>编程小技巧</h3><ul><li>如何打空格: 使用<code>&amp;nbsp;</code>即可在页面中显示空格(注意分号┭┮﹏┭┮)</li></ul><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><p>CSS中的盒子模型如下图所示:<br><img src="https://s2.loli.net/2022/05/09/kBuqSKvbzJHFMIP.png" alt="盒子模型"></p><h3 id="CSS定位"><a href="#CSS定位" class="headerlink" title="CSS定位"></a>CSS定位</h3><p>CSS中的定位用于对页面中的元素进行布局,常见的定位有以下几种:</p><ol><li>静态定位(static)<br>一般标签元素在不加任何定位属性时都属于静态定位,属于标准流。</li><li>绝对定位(absolute)<br>绝对定位会将指定元素从文档流中拿出,再通过位移属性相对于其最近的已定位祖先元素。<div class="note info simple"><p>因为绝对定位的框与文档流无关，所以它们可以覆盖页面上的其它元素。可以通过设置 z-index 属性来控制这些框的堆放次序。</p></div></li><li>相对定位(relate)<br>相对定位是相对于该元素在正常文件流中的位置,通过设置的位移属性计算得到。<div class="note warning simple"><p>该元素仍然保持其未定位前的形状，它原本所占的空间仍保留</p></div></li><li>固定定位(fixed)<br>与绝对定位类似,但它是相对于浏览器窗口定位,不会随滚动条进行滚动。</li><li>粘性定位(sticky)<br>粘性定位可以被认为是相对定位和固定定位的混合。简单来说，在滑动过程中，某个元素距离其父元素的距离达到 sticky粘性定位的要求时(比如top：100px)；position:sticky这时的效果相当于fixed定位，固定到适当位置</li></ol>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue框架学习</title>
      <link href="/2022/05/08/post/"/>
      <url>/2022/05/08/post/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue基础语法"><a href="#Vue基础语法" class="headerlink" title="Vue基础语法"></a>Vue基础语法</h2><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><p>  Vue中的数据绑定有以下两种方式:</p><ol><li>单向绑定(v-bind): 数据只能从data流向页面,当data中被绑定变量的内容改变时,这种改变会实时展示在页面上。</li><li>双向绑定(v-model): 数据在data和页面之间双向流通。</li></ol><div class="note warning simple"><p>双向绑定一般都应用在表单元素上(input,select等)</p></div><div class="note info simple"><p>v-model:value 可以简写成v-model,因为v-model默认收集的就是value值</p></div><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><h4 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h4><p>Vue主要使用<mark class="hl-label red">v-on</mark> 监听事件,调用相应函数对用户的交互作出回应。<br>以下为事件处理的基本要点:</p><ol><li>使用<code>v-on:xxx</code>或<code>@xxx</code>来绑定事件,其中<mark class="hl-label blue">xxx</mark> 是事件名</li><li>事件的函数需要配置在methods对象中,最终在vm上</li><li>methods对象中的函数都在Vue的管理之下,因此函数中的<mark class="hl-label orange">this</mark> 指向的是vm或组件的实例对象</li><li><code>@click=&quot;demo&quot;</code>和<code>@click=&quot;demo($event)&quot;</code>效果一致,但是后者可以传参</li></ol><h5 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h5><p>Vue中的事件修饰符:</p><ol><li>.prevent: 阻止默认事件;</li><li>.stop: 阻止事件冒泡;</li><li>.once: 事件只触发一次;</li><li>.capture: 使用事件的捕获模式;</li><li>.self: 只有event.target是当前操作的元素时才能触发事件;</li><li>.passive: 事件默认立即执行,无需等待事件回调执行完毕;</li></ol><p>前三个事件修饰符是常用的,可以重点记一下。</p><h5 id="Vue中常用的按键别名"><a href="#Vue中常用的按键别名" class="headerlink" title="Vue中常用的按键别名"></a>Vue中常用的按键别名</h5><ol><li>回车: enter</li><li>删除: delete(捕获”删除”和”退格”)</li><li>退出: esc</li><li>空格: space</li><li>换行: tab(必须配合keydown使用)</li><li>上: up</li><li>下: down</li><li>左: left</li><li>右: right</li></ol><h5 id="Vue中的系统修饰键-ctrl-alt-shift-meta"><a href="#Vue中的系统修饰键-ctrl-alt-shift-meta" class="headerlink" title="Vue中的系统修饰键:ctrl,alt,shift,meta"></a>Vue中的系统修饰键:ctrl,alt,shift,meta</h5><ol><li>配合keyup使用: 按下修饰键的同时,再按下其他键,随后释放其他键,才会触发绑定事件</li><li>配合keydown使用: 正常触发绑定事件</li></ol><div class="note info simple"><p>Vue中未提供别名的按键,可以使用按键原始的key值去绑定,格式为kebab-case(短横线命名)</p></div>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板测试</title>
      <link href="/2022/05/06/%E6%A8%A1%E6%9D%BF%E6%B5%8B%E8%AF%95/"/>
      <url>/2022/05/06/%E6%A8%A1%E6%9D%BF%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="模板测试"><a href="#模板测试" class="headerlink" title="模板测试"></a>模板测试</h2><p>首先啊即可完成放不开九八七六五的海南</p><p>扣1送地狱火<br>111大哥真送吗？</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>这是我的第一篇博客</title>
      <link href="/2022/05/06/testBlog/"/>
      <url>/2022/05/06/testBlog/</url>
      
        <content type="html"><![CDATA[<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="博客更新代码"><a href="#博客更新代码" class="headerlink" title="博客更新代码"></a>博客更新代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  //清除缓存</span><br><span class="line">hexo g      //生成网站静态文件到默认设置的 public 文件夹</span><br><span class="line">hexo d      //自动部署到设定的仓库</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/05/06/hello-world/"/>
      <url>/2022/05/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
