<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>排序算法</title>
      <link href="/2023/01/16/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2023/01/16/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>本篇记录我在学习排序算法过程中的一些笔记，看个乐就行。</p><h2 id="选择排序-Selection-Sort"><a href="#选择排序-Selection-Sort" class="headerlink" title="选择排序(Selection Sort)"></a>选择排序(Selection Sort)</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>基本思想是在未排序的数列中找到最小(最大)的元素，然后将其放在起始位置；然后在剩余的未排序的数列中寻找最小(最大)的元素，然后将其放在已排序数列的后面。</p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">python</button></li><li class="tab"><button type="button" data-href="#note-2">C++</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">selection_sort</span>(<span class="params">num</span>):</span><br><span class="line">    length = <span class="built_in">len</span>(num)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length - <span class="number">1</span>):</span><br><span class="line">        min_index = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, length):</span><br><span class="line">            <span class="keyword">if</span> num[min_index] &gt; num[j]:</span><br><span class="line">                min_index = j</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        num[min_index], num[i] = num[i], num[min_index]</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> num</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先咕了</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="算法复杂度计算"><a href="#算法复杂度计算" class="headerlink" title="算法复杂度计算"></a>算法复杂度计算</h3><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django学习笔记</title>
      <link href="/2022/10/18/Django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/18/Django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<div class="note info simple"><p>本文章只是记录一下学习Django后端框架时所做的一些笔记,看个乐就行🥰</p></div><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><del>咕咕咕😤😤😤</del></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="新建django项目"><a href="#新建django项目" class="headerlink" title="新建django项目"></a>新建django项目</h2><p>在这里主要介绍两种方法: </p><ul><li>命令行创建: <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject [project_name]  # 新建项目</span><br><span class="line">cd [project_name]</span><br><span class="line">python manage.py startapp [app_name]      # 新建app, 一般来说一个app都是一个完整的模块, 完成一组任务</span><br></pre></td></tr></table></figure></li><li>使用Pycharm创建项目: 没啥好说的, 直接鼠标点点点就完事了。<del>JetBrains全家桶确实好用</del></li></ul><h2 id="django项目结构"><a href="#django项目结构" class="headerlink" title="django项目结构"></a>django项目结构</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[project_name]</span><br><span class="line">    │</span><br><span class="line">    ├─manage.py</span><br><span class="line">    ├─[project_name]</span><br><span class="line">    │       ├─__init__.py</span><br><span class="line">    │       ├─settings.py</span><br><span class="line">    │       ├─asig.py</span><br><span class="line">    │       ├─wsig.py</span><br><span class="line">    │       └─urls.py</span><br><span class="line">    ├─[app_name] # 一个项目可以有多个app</span><br><span class="line">    │     ├─migrations</span><br><span class="line">   ...    ├─__init__.py</span><br><span class="line">          ├─models.py</span><br><span class="line">          ├─apps.py</span><br><span class="line">          ├─views.py</span><br><span class="line">          ├─tests.py</span><br><span class="line">          └─admin.py</span><br></pre></td></tr></table></figure><h3 id="各个项目文件的作用"><a href="#各个项目文件的作用" class="headerlink" title="各个项目文件的作用"></a>各个项目文件的作用</h3><ul><li>project_name: <ul><li><code>__init__.py</code>: </li><li><code>settings.py</code>: 对数据库,应用等进行添加和设置</li><li><code>asig.py</code>: </li><li><code>wsig.py</code>: </li><li><code>urls.py</code>: 添加URL及对应URL下的函数</li></ul></li><li>app_name: <ul><li><code>migrations</code>: </li><li><code>__init__.py</code>: </li><li><code>models.py</code>: 建立数据库表中需求所需要的表和属性</li><li><code>apps.py</code>: 作用域为所属应用而非全局,利用config在<code>settings.py</code>中注册使得应用在项目中可见</li><li><code>views.py</code>: 在这个文件中编写所有的请求处理函数</li><li><code>tests.py</code>: 用于写测试代码, 方便测试</li><li><code>admin.py</code>: 在admin页面注册model, 方便管理自带数据库(不使用自带数据库的可以忽略)</li></ul></li></ul><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><div class="note info simple"><p>这一部分介绍Django框架建表、请求处理函数编写过程中的一些基础点, 附带模板参考</p></div><h3 id="建表相关"><a href="#建表相关" class="headerlink" title="建表相关"></a>建表相关</h3><div class="note success simple"><p>这部分主要是在models.py中进行编码</p></div><h4 id="Django中Model的数据类型"><a href="#Django中Model的数据类型" class="headerlink" title="Django中Model的数据类型"></a>Django中Model的数据类型</h4><p>定义属性时需要指定字段的数据类型, 具体模板如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var = models.TypeField(Options)</span><br></pre></td></tr></table></figure><p>字段数据类型(TypeField)与数据库数据类型相对应: </p><ol><li>AutoField<ul><li>解释: 根据ID自增长的IntegerField字段。通常用于主键ID，无需使用</li></ul></li><li>IntegerField<ul><li>解释: 32位整数，可自定义选项</li></ul></li><li>BooleanField<ul><li>解释: 一个布尔值(true/false)字段</li></ul></li><li>CharField<ul><li>解释: 一个字符串字段，对小字符串和大字符串都适用。对于大量文本建议使用TextField。<br>必须参数：max_length,字段的最大字符数。</li></ul></li><li>DateField<ul><li>解释: 利用 Python 的 datetime.date 实例来表示日期。<br>可选参数DateField.auto_now：每一次保存对象时，Django 都会自动将该字段的值设置为当前时间。一般用来表示 “最后修改” 时间。<br>可选参数DateField.auto_now_add：在第一次创建对象时，Django 自动将该字段的值设置为当前时间，一般用来表示对象创建时间。</li></ul></li><li>DateTimeField<ul><li>解释: 利用 datetime.datetime 实例表示日期和时间。该字段所按受的参数和 DateField 一样</li></ul></li><li>DecimalField<ul><li>解释: 使用 Decimal 实例表示固定精度的十进制数的字段。<br>必须参数DecimalField.max_digits：数字允许的最大位数<br>必须参数DecimalField.decimal_places：小数的最大位数</li></ul></li><li>EmailField<ul><li>解释: 可以看做带有 email 合法性检测的CharField 。<br>默认max_length=75</li></ul></li><li>TextField<ul><li>解释: 超大文本字段</li></ul></li><li>FileField<ul><li>解释: 文件字段</li></ul></li><li>ImageField<ul><li>解释: 继承于FileField，确保是有效图片</li></ul></li></ol><h4 id="Django中Model中的字段选项"><a href="#Django中Model中的字段选项" class="headerlink" title="Django中Model中的字段选项"></a>Django中Model中的字段选项</h4><p>字段选项(Options):</p><ol><li><code>null</code>: 如果为<code>True</code>, 表示允许为空, 默认值为<code>False</code></li><li><code>blank</code>: 如果为<code>True</code>, 则该字段允许为空白,默认值为<code>False</code></li><li><code>db_colunm</code>: 字段名称, 若未指定,则默认为<code>var</code></li><li><code>db_index</code>: 如果为<code>True</code>, 则在表中会议此字段创建索引, 默认值为<code>False</code></li><li><code>default</code>: 设置默认值</li><li><code>primary_key</code>: 如果为<code>True</code>, 则该字段会成为模型的主键字段,默认值为<code>False</code>, 一般作为AutoField的选项使用, <del>当然把其它字段设置为主键也不是不行</del></li><li><code>unique</code>: 如果为<code>True</code>, 这个字段在表中必须有唯一值, 默认值是<code>False</code></li></ol><div class="note warning simple"><p>null是数据库范畴的概念, blank是表单验证范畴的 <del>ps.其实我也暂时没弄清楚, 上学期数据库摸了🤣</del></p></div><h4 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h4><p>在设置<strong>外键</strong>时, 需要通过设置on_delete选项来指明外键引用表数据如何处理, 在django.db.models中包含了以下可选常量:</p><ul><li><code>CASCADE</code>: 级联, 删除主表数据时连同删除外键表中的数据</li><li><code>PROTECT</code>: 保护, 通过抛出<code>ProtectedError</code>异常来阻止删除主表中被外键应用的数据</li><li><code>SET_NULL</code>: 外键引用表数据设置为NULL, 仅在该字段<code>null=True</code>时才能使用</li><li><code>SET_DEFAULT</code>: 设置为默认值，仅在该字段设置了默认值时可用</li><li><code>SET()</code>: 设置为特定值或者调用特定方法</li><li><code>DO_NOTHING</code>: 不做任何操作, 如果数据库前置指明级联性, 此选项会抛出<code>IntegrityError</code></li></ul><h2 id="项目运行"><a href="#项目运行" class="headerlink" title="项目运行"></a>项目运行</h2><p>使用指令运行项目, 这些指令都是在项目文件夹下的<code>terminal</code>输入:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate      # 前两步是相当于建表</span><br><span class="line">python manage.py runserver    # 实测这一步等价于点击Pycharm的运行</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell编程学习笔记</title>
      <link href="/2022/09/28/Shell%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/09/28/Shell%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<div class="note info modern"><p>本博客只是记录了一些Shell学习的一些笔记, 看个乐就行🤗</p></div><p>Shell属于一个脚本语言, 在学习了Javascript、python这些脚本语言之后，发现这些玩意儿都是有一些相同点的, 比如说与C语言,Java这些强类型语言不同, 脚本语言在变量定义方面不会要求声明变量的类型。</p><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><ul><li>变量定义: 作为脚本语言, shell的变量定义不需要声明类型, 这是变量定义的标准格式<code>varName=varvalue</code></li><li>变量使用: 使用变量时要在变量名前加<code>$</code>, 并且最好把变量名放在<code>&#123;&#125;</code>中, <code>&#123;varName&#125;</code></li><li>只读变量: 使用关键词<code>readonly</code>可以将变量变成只读变量, 其值不能被修改</li><li>删除变量: 使用关键词<code>unset</code>可以删除变量</li><li>字符串:<ul><li>单引号: 单引号内的字符会原样输出, 符号串中的变量名会无法被识别</li><li>双引号: 双引号内可以出现变量(使用时需要<code>$</code>), 且双引号中可以出现转义字符</li><li>截取子串: <code>$&#123;string:1:4&#125;</code>表示从<code>string</code>的第2个字符开始截取4个字符</li></ul></li><li>数组: <ul><li>定义: <code>array_name=(value0 value1 value2 value3 ... )</code></li><li>赋值: <code>array_name[i]=valuei</code></li><li>获取数组所有元素: <code>$&#123;array_name[@]&#125;</code></li></ul></li><li>算数运算: <code>expr 算术运算式</code> <mark class="hl-label red">对于乘法符号要使用转义符</mark> </li><li>关系运算: <code>[ 关系运算式 ]</code> <mark class="hl-label orange">变量与运算符之间要有空格</mark> </li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-butterfly标签外挂代码模板</title>
      <link href="/2022/09/26/hexo-butterfly%E6%A0%87%E7%AD%BE%E5%A4%96%E6%8C%82%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/09/26/hexo-butterfly%E6%A0%87%E7%AD%BE%E5%A4%96%E6%8C%82%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="标签外挂-Tag-Plugins"><a href="#标签外挂-Tag-Plugins" class="headerlink" title="标签外挂 (Tag Plugins)"></a>标签外挂 (Tag Plugins)</h2><div class="note danger modern"><p>本文章转载自<a href="https://butterfly.js.org/">butterfly</a></p></div><div class="note info modern"><p>标签外挂是Hexo独有的功能，并非原生Markdown格式。</p><p>以下所介绍的写法，只适用于Butterfly主题，用在其它主题上不会有效果🤗</p></div><div class="note warning modern"><p>标签外挂可以为你的博客带来一些额外的功能和UI方面的美化，但是其使用也有一定的限制，使用时请留意。</p></div><h3 id="Note-Bootstrap-Callout"><a href="#Note-Bootstrap-Callout" class="headerlink" title="Note (Bootstrap Callout)"></a>Note (Bootstrap Callout)</h3><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">通用设置</button></li><li class="tab"><button type="button" data-href="#note-2">方法一</button></li><li class="tab"><button type="button" data-href="#note-3">用法2(自定义icon)</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><p>移植于next主题, 并进行修改。<br>修改<code>主题配置文件</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">simple</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><br><code>icons</code>和<code>light_bg_offset</code>只对方法一生效<br>Note标签外挂拥有两种用法</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any Content(support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td style="text-align:center">class</td><td style="text-align:center">【可选】标签，不同的标签有不同的颜色(default / primary / success / info / warning / danger)</td></tr><tr><td style="text-align:center">no-icon</td><td style="text-align:center">【可选】标签，不显示icon</td></tr><tr><td style="text-align:center">style</td><td style="text-align:center">【可选】可以覆盖配置中的style(simple / modern / flat / disabled)</td></tr></tbody></table></div><blockquote><p>simple</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;</span><br><span class="line">默認 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;</span><br><span class="line">default 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;</span><br><span class="line">primary 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;</span><br><span class="line">success 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;</span><br><span class="line">info 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;</span><br><span class="line">warning 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;</span><br><span class="line">danger 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="note simple"><p>默認 提示塊標籤</p></div><div class="note default simple"><p>default 提示塊標籤</p></div><div class="note primary simple"><p>primary 提示塊標籤</p></div><div class="note success simple"><p>success 提示塊標籤</p></div><div class="note info simple"><p>info 提示塊標籤</p></div><div class="note warning simple"><p>warning 提示塊標籤</p></div><div class="note danger simple"><p>danger 提示塊標籤</p></div><blockquote><p>modern</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note modern %&#125;</span><br><span class="line">默認 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;</span><br><span class="line">default 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;</span><br><span class="line">primary 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;</span><br><span class="line">success 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;</span><br><span class="line">info 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;</span><br><span class="line">warning 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;</span><br><span class="line">danger 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="note modern"><p>默認 提示塊標籤</p></div><div class="note default modern"><p>default 提示塊標籤</p></div><div class="note primary modern"><p>primary 提示塊標籤</p></div><div class="note success modern"><p>success 提示塊標籤</p></div><div class="note info modern"><p>info 提示塊標籤</p></div><div class="note warning modern"><p>warning 提示塊標籤</p></div><div class="note danger modern"><p>danger 提示塊標籤</p></div><blockquote><p>flat</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note flat %&#125;</span><br><span class="line">默認 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;</span><br><span class="line">default 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;</span><br><span class="line">primary 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;</span><br><span class="line">success 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;</span><br><span class="line">info 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;</span><br><span class="line">warning 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;</span><br><span class="line">danger 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="note flat"><p>默認 提示塊標籤</p></div><div class="note default flat"><p>default 提示塊標籤</p></div><div class="note primary flat"><p>primary 提示塊標籤</p></div><div class="note success flat"><p>success 提示塊標籤</p></div><div class="note info flat"><p>info 提示塊標籤</p></div><div class="note warning flat"><p>warning 提示塊標籤</p></div><div class="note danger flat"><p>danger 提示塊標籤</p></div><blockquote><p>disabled</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note disabled %&#125;</span><br><span class="line">默認 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default disabled %&#125;</span><br><span class="line">default 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary disabled %&#125;</span><br><span class="line">primary 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;</span><br><span class="line">success 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;</span><br><span class="line">info 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;</span><br><span class="line">warning 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;</span><br><span class="line">danger 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="note disabled"><p>默認 提示塊標籤</p></div><div class="note default disabled"><p>default 提示塊標籤</p></div><div class="note primary disabled"><p>primary 提示塊標籤</p></div><div class="note success disabled"><p>success 提示塊標籤</p></div><div class="note info disabled"><p>info 提示塊標籤</p></div><div class="note warning disabled"><p>warning 提示塊標籤</p></div><div class="note danger disabled"><p>danger 提示塊標籤</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td style="text-align:center">color</td><td style="text-align:center">【可选】颜色(default / blue / pink / red / purple /orange / green)</td></tr><tr><td style="text-align:center">icon</td><td style="text-align:center">【可选】可配置自定义icon(只支持font awesome图标，也可以配置no-icon)</td></tr><tr><td style="text-align:center">style</td><td style="text-align:center">【可选】可以覆盖配置中的style(simple / modern / flat / disabled)</td></tr></tbody></table></div><blockquote><p>simple</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;</span><br><span class="line">你是刷 Visa 還是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;</span><br><span class="line">2021年快到了....</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;</span><br><span class="line">小心開車 安全至上</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;</span><br><span class="line">這是三片呢？還是四片？</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;</span><br><span class="line">你是刷 Visa 還是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;</span><br><span class="line">剪刀石頭布</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;</span><br><span class="line">前端最討厭的瀏覽器</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 還是 UnionPay</p></div><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心開車 安全至上</p></div><div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>這是三片呢？還是四片？</p></div><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 還是 UnionPay</p></div><div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石頭布</p></div><div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最討厭的瀏覽器</p></div><blockquote><p>modern</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;</span><br><span class="line">你是刷 Visa 還是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;</span><br><span class="line">2021年快到了....</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;</span><br><span class="line">小心開車 安全至上</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;</span><br><span class="line">這是三片呢？還是四片？</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;</span><br><span class="line">你是刷 Visa 還是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;</span><br><span class="line">剪刀石頭布</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;</span><br><span class="line">前端最討厭的瀏覽器</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 還是 UnionPay</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心開車 安全至上</p></div><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>這是三片呢？還是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 還是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石頭布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最討厭的瀏覽器</p></div><blockquote><p>flat</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;</span><br><span class="line">你是刷 Visa 還是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;</span><br><span class="line">2021年快到了....</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;</span><br><span class="line">小心開車 安全至上</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;</span><br><span class="line">這是三片呢？還是四片？</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;</span><br><span class="line">你是刷 Visa 還是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;</span><br><span class="line">剪刀石頭布</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;</span><br><span class="line">前端最討厭的瀏覽器</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 還是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心開車 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>這是三片呢？還是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 還是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石頭布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最討厭的瀏覽器</p></div><blockquote><p>disabled</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;</span><br><span class="line">你是刷 Visa 還是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;</span><br><span class="line">2021年快到了....</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;</span><br><span class="line">小心開車 安全至上</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;</span><br><span class="line">這是三片呢？還是四片？</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;</span><br><span class="line">你是刷 Visa 還是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;</span><br><span class="line">剪刀石頭布</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;</span><br><span class="line">前端最討厭的瀏覽器</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 還是 UnionPay</p></div><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding disabled"><i class="note-icon fas fa-car-crash"></i><p>小心開車 安全至上</p></div><div class="note red icon-padding disabled"><i class="note-icon fas fa-fan"></i><p>這是三片呢？還是四片？</p></div><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 還是 UnionPay</p></div><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石頭布</p></div><div class="note green icon-padding disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最討厭的瀏覽器</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h3><p>使用方法：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn [url],[text],[icon],[color] [style] [layout] [position] [size] %&#125;</span><br><span class="line"></span><br><span class="line">[url]         : 鏈接</span><br><span class="line">[text]        : 按鈕文字</span><br><span class="line">[icon]        : [可選] 圖標</span><br><span class="line">[color]       : [可選] 按鈕背景顔色(默認style時）</span><br><span class="line"><span class="code">                      按鈕字體和邊框顔色(outline時)</span></span><br><span class="line"><span class="code">                      default/blue/pink/red/purple/orange/green</span></span><br><span class="line"><span class="code">[style]       : [可選] 按鈕樣式 默認實心</span></span><br><span class="line"><span class="code">                      outline/留空</span></span><br><span class="line"><span class="code">[layout]      : [可選] 按鈕佈局 默認為line</span></span><br><span class="line"><span class="code">                      block/留空</span></span><br><span class="line"><span class="code">[position]    : [可選] 按鈕位置 前提是設置了layout為block 默認為左邊</span></span><br><span class="line"><span class="code">                      center/right/留空</span></span><br><span class="line"><span class="code">[size]        : [可選] 按鈕大小</span></span><br><span class="line"><span class="code">                      larger/留空</span></span><br></pre></td></tr></table></figure></p><blockquote><p>demo</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">This is my website, click the button &#123;% btn &#x27;https://lightmeter30.github.io/&#x27;,Butterfly %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://lightmeter30.github.io/&#x27;,Butterfly,far fa-hand-point-right %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://lightmeter30.github.io/&#x27;,Butterfly,,outline %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://lightmeter30.github.io/&#x27;,Butterfly,far fa-hand-point-right,outline %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://lightmeter30.github.io/&#x27;,Butterfly,far fa-hand-point-right,larger %&#125;</span><br></pre></td></tr></table></figure><p>This is my website, click the button <a class="btn-beautify " href="https://lightmeter30.github.io/"   title="Butterfly"><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify " href="https://lightmeter30.github.io/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify outline" href="https://lightmeter30.github.io/"   title="Butterfly"><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify outline" href="https://lightmeter30.github.io/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify larger" href="https://lightmeter30.github.io/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a></p><h3 id="label"><a href="#label" class="headerlink" title="label"></a>label</h3><p>高亮所需的文字</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label text color %&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">text</td><td style="text-align:center">文字</td></tr><tr><td style="text-align:center">color</td><td style="text-align:center">【可选】背景颜色，默认为<code>default</code>(default/blue/pink/red/purple/orange/green)</td></tr></tbody></table></div><blockquote><p>demo</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">臣亮言：&#123;% label 先帝 %&#125;創業未半，而&#123;% label 中道崩殂 blue %&#125;。今天下三分，&#123;% label 益州疲敝 pink %&#125;，此誠&#123;% label 危急存亡之秋 red %&#125;也！然侍衞之臣，不懈於內；&#123;% label 忠志之士 purple %&#125;，忘身於外者，蓋追先帝之殊遇，欲報之於陛下也。誠宜開張聖聽，以光先帝遺德，恢弘志士之氣；不宜妄自菲薄，引喻失義，以塞忠諫之路也。</span><br><span class="line">宮中、府中，俱為一體；陟罰臧否，不宜異同。若有&#123;% label 作奸 orange %&#125;、&#123;% label 犯科 green %&#125;，及為忠善者，宜付有司，論其刑賞，以昭陛下平明之治；不宜偏私，使內外異法也。</span><br></pre></td></tr></table></figure><p>臣亮言：<mark class="hl-label default">先帝</mark> 創業未半，而<mark class="hl-label blue">中道崩殂</mark> 。今天下三分，<mark class="hl-label pink">益州疲敝</mark> ，此誠<mark class="hl-label red">危急存亡之秋</mark> 也！然侍衞之臣，不懈於內；<mark class="hl-label purple">忠志之士</mark> ，忘身於外者，蓋追先帝之殊遇，欲報之於陛下也。誠宜開張聖聽，以光先帝遺德，恢弘志士之氣；不宜妄自菲薄，引喻失義，以塞忠諫之路也。<br>宮中、府中，俱為一體；陟罰臧否，不宜異同。若有<mark class="hl-label orange">作奸</mark> 、<mark class="hl-label green">犯科</mark> ，及為忠善者，宜付有司，論其刑賞，以昭陛下平明之治；不宜偏私，使內外異法也。</p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SysY语言编译器设计文档</title>
      <link href="/2022/09/26/SysY%E8%AF%AD%E8%A8%80%E7%BC%96%E8%AF%91%E5%99%A8%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3/"/>
      <url>/2022/09/26/SysY%E8%AF%AD%E8%A8%80%E7%BC%96%E8%AF%91%E5%99%A8%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="2022编译器设计文档"><a href="#2022编译器设计文档" class="headerlink" title="2022编译器设计文档"></a>2022编译器设计文档</h1><div class="note info simple"><p>项目源码在此库中，如果觉得对你有所启发的话，请给个star吧！🥰<a class="btn-beautify larger" href="https://github.com/Lightmeter30/Compiler"   title="源码库"><i class="fab fa-github"></i><span>源码库</span></a></p></div><h2 id="词法分析设计"><a href="#词法分析设计" class="headerlink" title="词法分析设计"></a>词法分析设计</h2><h3 id="编码前的设计"><a href="#编码前的设计" class="headerlink" title="编码前的设计"></a>编码前的设计</h3><h4 id="代码结构总体设计"><a href="#代码结构总体设计" class="headerlink" title="代码结构总体设计"></a>代码结构总体设计</h4><ul><li>构造了一个词法分析器类：<code>Lexer</code>，其功能是完成词法分析，因此这个类封装了完成词法分析所需要的所有方法；同时<code>lexer</code>类还实现了<code>error</code>接口,用来处理词法分析过中可能实现的错误；</li><li>构造了一个单词信息类：<code>WordInfo</code>，其功能是储存通过词法分析获得的单词的内容，类别码等信息；对于类别码是<code>IntConst</code>的单词，还会存储它的数值。</li></ul><h4 id="词法分析的具体实现方案"><a href="#词法分析的具体实现方案" class="headerlink" title="词法分析的具体实现方案"></a>词法分析的具体实现方案</h4><ul><li>总体实现方法: 词法分析函数每次读入一个字符，然后根据这个字符的值进入不同的分支，并且在该分支之下一定会完成一个单词类别码的分析或注释的处理。</li><li>实现难点:<ol><li>字符串的处理: SysY语言中的字符串一定是被<code>&quot;</code>所包裹的,因此只要识别到字符<code>&quot;</code>就进入字符串处理分支, 一直读取字符直到读到下一个<code>&quot;</code>。这个过程可能出现如下错误: 在读到下一个<code>&quot;</code>之前结束; 读取字符过程中出现非法字符(非法字符的定义详见错误处理); <code>%</code>或<code>\</code>单独出现(文法规定必须是<code>%d</code>和<code>\n</code>); </li><li>双字符符号的识别: 对于<code>!=</code>、<code>&gt;=</code>、<code>&lt;=</code>、<code>==</code>、<code>&amp;&amp;</code>、<code>||</code>这些双字符符号, 在读到对应的前缀进入对应的条件分支时, 需要预读一个字符,假如说可以组成文法定义的双字符, 则将其添加为双字符符号, 否则进行符号回退, 并且只处理前缀。</li><li>注释的处理: 由于字符串通过一个独立的分支处理, 因此字符串中的<code>//</code>、<code>/*</code>、<code>*/</code>不会被识别为注释; 同时一旦确定读取到<code>//</code>或<code>/*</code>,在读到换行符或<code>*/</code>之前不会对注释字符进行任何语法上的分析。因此也同时避免将注释内容误认为语法成分。</li><li>标识符的处理: 只要是以字母和下划线开头, 就进入标识符处理分支, 直到字符既不是字母、数字或者下划线。</li><li>换行: 注意在不同操作系统下的换行符可能有不同的情况,因此需要进行相关处理; 同时后续的错误处理作业中会有要求输出错误片段对应的行号的要求,因此要注意保存行号。</li></ol></li></ul><h3 id="编码后的修改"><a href="#编码后的修改" class="headerlink" title="编码后的修改"></a>编码后的修改</h3><p>考虑到词法分析中部分函数可能在其它功能中也需要使用，使代码的结构更加清晰合理，因此新建一个名字为<code>Tools</code>的工具类，而<code>Lexer</code>类只保留最主要的词法分析相关的方法，将字符串判断和处理函数这些与词法分析功能关联不大的方法转移到<code>Tools</code>类中，将其作为一个专门存储通用的静态方法的工具类使用。</p><h2 id="语法分析设计"><a href="#语法分析设计" class="headerlink" title="语法分析设计"></a>语法分析设计</h2><h3 id="代码结构总体设计-1"><a href="#代码结构总体设计-1" class="headerlink" title="代码结构总体设计"></a>代码结构总体设计</h3><ul><li>构造了一个语法分析类：<code>SyntacticParser</code>，其功能是完成语法分析，因此这个类有着语法分析所需要的大部分静态方法；同时<code>SyntacticParser</code>类还实现了<code>error</code>接口，为错误处理部分预留了接口。</li><li>新建了一个类<code>ParseInfo</code>，其继承于抽象类<code>WordInfo</code>，用于在语法分析过程中存储非终结符，便于输出。</li><li>在<code>Tools</code>类中新添了一些语法分析所必须的方法。</li></ul><h3 id="语法分析具体实现方案"><a href="#语法分析具体实现方案" class="headerlink" title="语法分析具体实现方案"></a>语法分析具体实现方案</h3><ul><li>实现方案：本编译器采用的是递归下降分析法（一种自顶向下的分析方法）来实现语法分析。即为每一个非终结符编写一个递归子程序，用于完成该非终结符对应的语法成分的分析与识别任务。</li><li>实现难点：<ol><li>语法匹配：在SysY语言的文法中，有许多非终结符的推导存在多个分支，且它们之间的FIRST集的交不为空。因此为了避免在语法分析过程中发生回溯，我采取的方案是进行预读，直到能够区分该进入哪一个分支，因此在语法分析类<code>SyntacticParser</code>中增加了一个回退读指针(对应类中变量<code>WordlistIndex</code>)的方法，用于把读指针回退到预读前的状态。</li><li>文法改写：原文法中存在左递归文法，而递归向下分析法是没有办法处理左递归文法的，因此我们需要对文法进行改写以消除左递归，并且保证文法改写前后的等价性。</li></ol></li></ul><h3 id="语法树设计"><a href="#语法树设计" class="headerlink" title="语法树设计"></a>语法树设计</h3><p>本编译器在使用递归下降分析法进行语法分析的同时建立源程序的语法树。后续的语义分析、中间代码生成都是在语法树的基础上进行的，下面是语法树的类的设计思路：</p><ul><li>这部分类位于 <code>./src/front/SyntaxTree</code> 中。</li><li>首先所有的语法树节点都继承了接口 <code>TreeNode</code> ，实现了获取其子节点序列(实现遍历)和生成中间代码两个方法；同时为文法中每一个非终结符设置了一个类，代表一个节点，实现了接口<code>TreeNode</code> 的方法。</li><li>除了为文法中的非终结符设计一个节点类，为了实现错误处理的相关功能，我们还增加了<code>ErrorSymbol</code> 节点来保存错误处理所需要的信息。</li></ul><h2 id="符号表设计"><a href="#符号表设计" class="headerlink" title="符号表设计"></a>符号表设计</h2><h3 id="类的设计"><a href="#类的设计" class="headerlink" title="类的设计"></a>类的设计</h3><ul><li><code>SymbolTable</code> ：由于SysY语言属于分程序结构语言，需要为每一个分程序建立一个符号表，类变量中的<code>fatherTable</code>指向其外层符号表；<code>symbolList</code>存储的是符号表项；<code>sonTable</code>存储着该层下所有的符号表。</li><li><code>SymbolItem</code> ：符号表项接口，里面定义了获取符号表项信息的所有方法<code>getName</code>获取变量名；<code>isConst</code>判断是否为常量；<code>getSize</code>获取当前表项变量所占内存大小；<code>setAddr</code>是设置表项变量在内存的地址；<code>getAddr</code>是获取表项变量在内存的地址。</li><li><code>Func</code>：符号表项的函数项的类，该类可以存储函数名，函数参数个数，函数返回值的种类等信息，同时实现了<code>symbolItem</code>接口中定义的所有方法。</li><li><code>FuncFormVar</code> ：符号表项中的函数参数项的类。该类存储了编译过程中函数参数所必需的信息：名字<code>name</code>，维数<code>dimension</code>，数组维数参数<code>shape</code>，地址<code>addr</code>等信息。同时实现了<code>symbolItem</code>接口中定义的所有方法。</li><li><code>Var</code>：符号表项中的变量项的类。该类存储了编译过程中变量所必需的信息：名字 <code>name</code>，是否为常量<code>isConst</code>，变量初始化值<code>initVal</code>，常量初始化值<code>constInitVal</code>，维数<code>dimension</code>，数组维数参数<code>shape</code>，地址<code>addr</code>等信息。</li></ul><p>为了处理不同模块下变量出现重名的情况，还添加了loc字段，其内容为<code>块号@块内号</code>，在<code>name</code>后面加上<code>loc</code>字段就可以唯一标识变量名。</p><h2 id="错误处理设计"><a href="#错误处理设计" class="headerlink" title="错误处理设计"></a>错误处理设计</h2><h3 id="类的设计-1"><a href="#类的设计-1" class="headerlink" title="类的设计"></a>类的设计</h3><p>为了实现错误处理,我们在front增加了一个继承了<code>Exception</code>类的<code>Error</code>类，用于记录错误种类和所在行，并且改写了<code>toString</code>方法，使其能打印出符合要求的错误信息。</p><p>我还在front模块设计了添加了一个<code>ErrorList</code>类，用于存储编译过程中源程序可能存在的错误，并且在其中实现了把错误输出到<code>error.txt</code>的方法。</p><h3 id="编译器可处理的错误类型"><a href="#编译器可处理的错误类型" class="headerlink" title="编译器可处理的错误类型"></a>编译器可处理的错误类型</h3><p><code>error</code>类能够处理如下错误: </p><div class="table-container"><table><thead><tr><th style="text-align:center">错误类别码</th><th>解释</th></tr></thead><tbody><tr><td style="text-align:center">a</td><td>非法符号(报错行号在所在行)</td></tr><tr><td style="text-align:center">b</td><td>同一作用域下名字重定义(所在行)</td></tr><tr><td style="text-align:center">c</td><td>未定义的名字(所在行)</td></tr><tr><td style="text-align:center">d</td><td>函数参数个数不匹配(函数名调用语句的函数名所在的行)</td></tr><tr><td style="text-align:center">e</td><td>函数参数类型不匹配(函数名调用语句的函数名所在的行)</td></tr><tr><td style="text-align:center">f</td><td>无返回值的函数存在不匹配的return语句(return所在行)</td></tr><tr><td style="text-align:center">g</td><td>有返回值的函数缺少return语句(函数结尾’}’所在行)</td></tr><tr><td style="text-align:center">h</td><td>不能改变常量的值(所在行)</td></tr><tr><td style="text-align:center">i</td><td>缺少分号(缺少分号的前一个非终结符所在行)</td></tr><tr><td style="text-align:center">j</td><td>缺少右小括号’)’(缺少右小括号前一个非终结符所在行)</td></tr><tr><td style="text-align:center">k</td><td>缺少右小括号’)’(缺少右小括号前一个非终结符所在行)</td></tr><tr><td style="text-align:center">l</td><td>printf中’%d’数量宇表达式个数不匹配(printf所在行)</td></tr><tr><td style="text-align:center">m</td><td>在非循环模块使用break \</td><td>continue(break \</td><td>continue所在行)</td></tr><tr><td style="text-align:center">n</td><td>其他错误</td></tr></tbody></table></div><p>在本编译器中在词法分析、语法分析、生从语法树、构建符号表的过程中就可以完成。只有在源程序没有错误的情况下编译器才会进行中间代码和目标代码的生成。</p><h2 id="代码生成设计"><a href="#代码生成设计" class="headerlink" title="代码生成设计"></a>代码生成设计</h2><h3 id="中间代码生成"><a href="#中间代码生成" class="headerlink" title="中间代码生成"></a>中间代码生成</h3><p>在接口TreeNode中添加方法<code>createMidCode()</code>,再在具体的节点中实现该方法。</p><p>本编译器的中间代码采用形如以下的四元式：</p><div class="note info simple"><p>(operation, operand1, operand2, result)，依次为运算符，运算数1，运算数2，结果。</p></div><p>本编译器涉及常量声明、变量声明、读语句、写语句、赋值语句、加减乘除模等运算语句、函数定义及调用语句，此部分的operation相关定义如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本算数运算</span></span><br><span class="line">ASSIGN    <span class="comment"># 赋值</span></span><br><span class="line">ADD       <span class="comment"># 加</span></span><br><span class="line">SUB       <span class="comment"># 减</span></span><br><span class="line">MUL       <span class="comment"># 乘</span></span><br><span class="line">DIV       <span class="comment"># 除</span></span><br><span class="line">MOD       <span class="comment"># 模</span></span><br><span class="line">SET       <span class="comment"># 逻辑判断</span></span><br><span class="line">NOT       <span class="comment"># 非</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数相关部分</span></span><br><span class="line">FUNC          <span class="comment"># 函数定义</span></span><br><span class="line">END_FUNC      <span class="comment"># 函数结束标志</span></span><br><span class="line">PREPARE_CALL  <span class="comment"># 函数调用准备</span></span><br><span class="line">CALL          <span class="comment"># 函数调用</span></span><br><span class="line">PUSH_PARA     <span class="comment"># 函数参数传递</span></span><br><span class="line">RETURN        <span class="comment"># 函数返回语句</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 变量定义部分</span></span><br><span class="line">VAR_DEF           <span class="comment"># 变量定义</span></span><br><span class="line">CONST_DEF         <span class="comment"># 常量定义</span></span><br><span class="line">FUNC_FORM_VAR_DEF <span class="comment"># 函数参数定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组操作</span></span><br><span class="line">ARR_SAVE      <span class="comment"># 保存数组值到内存</span></span><br><span class="line">ARR_LOAD      <span class="comment"># 读取数组值到寄存器</span></span><br><span class="line">PUSH_PARA_ARR <span class="comment"># 传递数组的地址(数组作为函数参数)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 跳转操作</span></span><br><span class="line">JUMP_IF</span><br><span class="line">JUMP</span><br><span class="line">LABEL</span><br><span class="line"></span><br><span class="line"><span class="comment"># IO</span></span><br><span class="line">PRINT</span><br><span class="line">GETINT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跳转</span></span><br><span class="line">OP_JUMP_IF <span class="string">&quot;JUMP_IF&quot;</span></span><br><span class="line">OP_JUMP <span class="string">&quot;JUMP&quot;</span></span><br><span class="line">OP_LABEL <span class="string">&quot;LABEL&quot;</span></span><br><span class="line">LVal: 变量名@&lt;depth,block序号&gt;</span><br><span class="line">shape: 初值为-1时说明是函数的参数值(Array)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其它</span></span><br><span class="line">SIGNAL_ARR_ADDR   <span class="comment"># 该变量为数组</span></span><br><span class="line">NEW_BLOCK         <span class="comment"># 基本块的开始</span></span><br><span class="line">EXIT_BLOCK        <span class="comment"># 基本块的结束</span></span><br><span class="line">WHILE_BIND        <span class="comment"># 绑定循环判断式和跳转标签</span></span><br><span class="line">EMPTY             <span class="comment"># 空语句</span></span><br><span class="line">ENTER_WHILE       <span class="comment"># 循环的开头</span></span><br><span class="line">EXIT_WHILE        <span class="comment"># 循环的结尾</span></span><br></pre></td></tr></table></figure><h4 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h4><p>在实现产生四元式的过程中，从语法树的根节点开始调用<code>createMidCode</code>完成一次后序遍历，期间生成中间代码，为了实现代码结构的解耦，语法树中的节点类中添加新的代码时，会传递参数<code>#TEMP</code>，由<code>MidCodeList</code>类负责分配新的临时变量，对于操作数少于四个的指令，传递<code>#NULL</code>占位，同时对于某些需要实现跳转的指令，部分四元式中存在参数<code>#AUTO_LABEL</code>，通过<code>MidCodeList</code>类负责分配新的跳转标签，对于字符串输出，则采用参数<code>#STRCONS</code>进行占位。</p><h3 id="Mips代码生成"><a href="#Mips代码生成" class="headerlink" title="Mips代码生成"></a>Mips代码生成</h3><h4 id="类构成分析"><a href="#类构成分析" class="headerlink" title="类构成分析"></a>类构成分析</h4><p>该部分的代码都位于<code>/src/back</code>文件夹中,下面是相关类的介绍：</p><ul><li><code>Mips</code>：Mips代码生成的最主要的类，实现了Mips代码生成的大部分逻辑。<ul><li><code>createMipsCode</code>：<code>Mips</code>类中实现代码生成的主要逻辑，首先查询符号表对所有的数组在<code>.data</code>段进行声明和内存分配，把输出的所有<code>formatString</code>保存到内存里。然后进行<code>.text</code>段代码编写：最后遍历中间代码生成Mips代码。</li><li><code>GenArithmetic</code>：生成算数相关的Mips代码的函数。</li><li><code>addOneMipsCode</code>：添加一条Mips代码。</li><li><code>isConst</code>：判断变量是否为常量。</li><li><code>setRegister</code>：为变量分配寄存器。</li><li><code>loadValue</code>：从内存读取数据。</li><li><code>saveValue</code>：保存数据到内存。</li><li><code>isInRegister</code>：判断变量是否分配了寄存器。</li><li><code>PrintMipsCode</code>：输出Mips代码。</li></ul></li><li><code>Tools</code>：存储Mips代码生成过程中使用的一些方法。</li></ul><h4 id="普通变量寻址"><a href="#普通变量寻址" class="headerlink" title="普通变量寻址"></a>普通变量寻址</h4><p>以函数为单位合并符号表，对于每一张符号表，确定新的所需空间的大小和每个变量的地址偏移，每次在进入函数前，将栈指针<code>sp</code>向下移动相同的单位，每次读到一个中间代码的变量名时，若发现其不在寄存器中或者需要写入内存，则查相应的函数符号表和全局符号表，获得变量在内存的地址。</p><h4 id="数组变量寻址"><a href="#数组变量寻址" class="headerlink" title="数组变量寻址"></a>数组变量寻址</h4><p>直接查找<code>.data</code>段的数组名进行寻址。</p><h4 id="函数运行栈布局"><a href="#函数运行栈布局" class="headerlink" title="函数运行栈布局"></a>函数运行栈布局</h4><ul><li><code>funcStackSize</code>：函数中出现的所有局部变量的所需空间；</li><li><code>StackTBegin</code>：栈中保存<code>t</code>寄存器的偏移量为60；</li><li><code>StackSBegin</code>：栈中保存<code>s</code>寄存器的偏移量为60；</li><li><code>LocalAddrInit</code>：局部变量的起始地址。</li></ul><p>上述变量的单位均为<code>byte</code>。</p><h4 id="函数跳转流程"><a href="#函数跳转流程" class="headerlink" title="函数跳转流程"></a>函数跳转流程</h4><ol><li>栈指针<code>sp</code>下移<code>funcStackSize + LocalAddrInit</code>的空间；</li><li>使用寄存器<code>$a0 ~ $a3</code>传递前四个参数；</li><li>以<code>(sp)</code>为基址，传递多出来的参数；</li><li>以<code>funcStackSize + StackSBegin</code>为基址，保存所有储存在寄存器<code>$s</code>中的变量。</li><li>使用指令<code>jal</code>跳转。</li></ol><h4 id="寄存器分配"><a href="#寄存器分配" class="headerlink" title="寄存器分配"></a>寄存器分配</h4><p>在每次进入函数时，按照符号表的顺序为变量分配所有的<code>t</code>寄存器和<code>s</code>寄存器，并建立绑定关系。在翻译四元式时，对于中间代码中的变量，查看其是否被分配了寄存器，若是，则直接返回此寄存器，否则用临时寄存器保存该变量在内存中的值，返回此临时寄存器。</p><h4 id="四元式翻译"><a href="#四元式翻译" class="headerlink" title="四元式翻译"></a>四元式翻译</h4><ul><li>基本运算<ul><li>将三个操作数中的中间变量转化为变量所在的寄存器(若未分配寄存器则通过<code>lw</code>加载到临时寄存器中)。</li><li>将中间代码翻译为对应的mips指令。</li><li>结果寄存器若使用的是临时寄存器<code>$t</code>则写回内存。</li></ul></li><li>IO操作<ul><li>对于<code>GETINT</code>则直接执行系统调用<code>li $v0, 5 \n syscall</code>，结果赋值给对应变量。</li><li>若<code>PRINT</code>的为<code>#STRCONS</code>(字符串)，则先获取位于<code>.data</code>段中对应的地址，再进行系统调用；</li><li>若为一个数字，则将该变量存入<code>$a0</code>后执行系统调用。</li></ul></li><li>函数调用<ul><li>在<code>PREPARE_CALL</code>时，修改栈指针<code>sp</code>；</li><li>在<code>PUSH_PARA</code>时，将变量的值或者数组的首地址保存到指定的<code>offset(sp)</code>的位置；</li><li>在<code>CALL</code>时，先保存所有<code>$s</code>和<code>$t</code>寄存器和<code>$ra</code>寄存器，在通过<code>jal</code>指令跳转到函数中，调用结束后再恢复这些寄存器。</li></ul></li><li>跳转<ul><li>把<code>JUMP_IF</code>指令后的条件翻译为不同的mips指令完成跳转：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> HashMap&lt;String, String&gt; mipsBOp = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">mipsBOp.put(<span class="string">&quot;!=&quot;</span>, <span class="string">&quot;bne&quot;</span>);</span><br><span class="line">mipsBOp.put(<span class="string">&quot;==&quot;</span>, <span class="string">&quot;beq&quot;</span>);</span><br><span class="line">mipsBOp.put(<span class="string">&quot;&gt;=&quot;</span>, <span class="string">&quot;bge&quot;</span>);</span><br><span class="line">mipsBOp.put(<span class="string">&quot;&lt;=&quot;</span>, <span class="string">&quot;ble&quot;</span>);</span><br><span class="line">mipsBOp.put(<span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;bgt&quot;</span>);</span><br><span class="line">mipsBOp.put(<span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;blt&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Compile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习笔记</title>
      <link href="/2022/09/26/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/09/26/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>本文章只是记录一下学习python时所做的一些笔记,看个乐就行🥰</p><h1 id="基础语法部分"><a href="#基础语法部分" class="headerlink" title="基础语法部分"></a>基础语法部分</h1><div class="note info simple"><p>这部分主要是记录python基础语法中容易弄错的细节</p></div>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器部署相关</title>
      <link href="/2022/07/03/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%E7%9B%B8%E5%85%B3/"/>
      <url>/2022/07/03/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="服务器预设置"><a href="#服务器预设置" class="headerlink" title="服务器预设置"></a>服务器预设置</h2><h3 id="请选择你的服务器"><a href="#请选择你的服务器" class="headerlink" title="请选择你的服务器"></a>请选择你的服务器</h3><p>首先你得有一台年轻人自己的服务器，目前来说腾讯云，阿里云等国内的云平台都有学生优惠，对于学生党来说，最便宜的就够用了。我使用的服务器系统是Ubuntu Server 20.04 LTS 64bit。</p><h3 id="SSH远程连接"><a href="#SSH远程连接" class="headerlink" title="SSH远程连接"></a>SSH远程连接</h3><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>这部分介绍SSH远程连接服务器的具体操作，保姆级别哟</p></div><p>首先我们要配置SSH远程连接我们的服务器，毕竟谁也不想每次操作服务器都得登录云平台，那样太麻烦了。</p><ol><li>首先我们要在控制台中点击登录，第一步要初始化超级用户ROOT的密码，进入superuser权限：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd     # 初始化密码</span><br><span class="line">su              # 切换到ROOT超级用户</span><br></pre></td></tr></table></figure></li><li>然后我们要修改相关的配置文件，允许SSH远程连接服务器：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config    # 编辑ssh配置文件</span><br></pre></td></tr></table></figure></li><li>打开文件后，对如下行按照注释进行修改：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RSAAuthentication yes                       # 开启rsa验证，需要添加</span><br><span class="line">PubkeyAuthentication yes                    # 开启公钥登录，一般被注释掉了，去掉前面的#就好</span><br><span class="line">AuthorizedKeysFile .ssh/authorized_keys     # 公钥保存位置，原来就有</span><br><span class="line">PasswordAuthentication yes                  # 开启使用密码登录</span><br></pre></td></tr></table></figure></li><li>保存退出后使用如下指令重启SSH服务<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service sshd restart        # 重启ssh服务</span><br></pre></td></tr></table></figure></li><li>再在root模式下使用如下指令添加一个用户：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adduser takune  # takune替换为你的用户名</span><br></pre></td></tr></table></figure>输入密码之后即可成功创建一个新用户。</li><li>由于部分服务器操作需要<code>sudo</code>权限，因此我们要给新添加的用户设置相关的权限：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sudoers            # 在该文件下配置新用户的sudo权限</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">User privilege specification</span></span><br><span class="line">takune ALL=(ALL:ALL) ALL    # 添加sudo权限，使用wq!强制保存配置</span><br></pre></td></tr></table></figure></li><li>获取本地SSH公钥之后，按照如下步骤进行配置：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ssh takune@123.45.56.890    # takune为你的用户名，@后面为服务器的IP地址</span><br><span class="line">mkdir .ssh                  # 在该用户的根目录创建一个.ssh文件夹</span><br><span class="line">cd .ssh                     # 进入.ssh文件夹</span><br><span class="line">touch authorized_keys       # 创建名字为authorized_keys的文件</span><br><span class="line">vim authorized_keys         # 编辑该文件内容，将SSH公钥复制到文件中后保存退出即可远程SSH连接</span><br><span class="line">sudo service sshd restart   # 使用sudo权限重启SSH服务 </span><br></pre></td></tr></table></figure>到这一步我们终于实现了通过SSH远程连接服务器，就可以更加方便地操作服务器了。</li></ol><h2 id="服务器安装Mysql以及相关配置"><a href="#服务器安装Mysql以及相关配置" class="headerlink" title="服务器安装Mysql以及相关配置"></a>服务器安装Mysql以及相关配置</h2><p>通过上一part的配置，我们现在可以使用的本地的powershell远程连接服务器进行相关操作了。下面我们将介绍在服务器安装Mysql的具体步骤以及相关配置使得我们可以远程连接服务器的mysql。</p><h3 id="服务器安装mysql步骤"><a href="#服务器安装mysql步骤" class="headerlink" title="服务器安装mysql步骤"></a>服务器安装mysql步骤</h3><ol><li>通过以下指令更新apt管理的资源包，这样才能够安装的最新版本的Mysql<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure></li><li>通过以下指令安装Mysql<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install mysql-server</span><br></pre></td></tr></table></figure></li><li>安装以后通过以下指令查看mysql运行状态；<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status mysql</span><br></pre></td></tr></table></figure>输出如下所示时，表示mysql已经处于允许状态。<br><img src="https://s2.loli.net/2022/07/05/3WurgSQ2bPxOcsZ.png" alt="Mysql状态查询"></li></ol><h3 id="mysql远程连接相关配置"><a href="#mysql远程连接相关配置" class="headerlink" title="mysql远程连接相关配置"></a>mysql远程连接相关配置</h3><p>在实际开发中，我们往往需要远程连接数据库并对其中的数据进行增删改查的操作。但是在默认情况下，mysql仅监听本地连接。若想允许远程连接数据库，首先需要修改配置文件，让mysql可以监听远程固定IP或所有远程IP。因此这一部分我们将修改mysql的相关配置文件，以实现远程连接的目的。</p><h4 id="修改配置文件mysqld-cnf"><a href="#修改配置文件mysqld-cnf" class="headerlink" title="修改配置文件mysqld.cnf"></a>修改配置文件mysqld.cnf</h4><p>其中配置文件<code>mysqld.cnf</code>的路径一般为<code>/etc/mysql/mysql.conf.d/mysqld.cnf</code>。</p><ol><li>通过以下命令进入配置文件<code>mysqld.cnf</code>；<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure></li><li>进入配置文件后，找到<code>bind-address</code>所在那一行，默认值为127.0.0.1，表示仅监听本地连接。因此我们要将其改为远程IP可访问。通过使用通配符IP地址0.0.0.0可以实现任意IP连接，或者是指定的IP地址。在这里我们将其设置为0.0.0.0，即允许所有IP访问。<br><img src="https://s2.loli.net/2022/07/05/4856K7SRPt2dZon.png" alt="修改mysql配置文件"></li><li>重启mysql服务<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart mysql</span><br></pre></td></tr></table></figure></li></ol><div class="note info flat"><p>在部分mysql版本的配置文件中没有<code>bind-address</code>这一行，在适当的地方加上就行</p></div><h4 id="添加新的mysql用户"><a href="#添加新的mysql用户" class="headerlink" title="添加新的mysql用户"></a>添加新的mysql用户</h4><p>由于使用ROOT用户进行远程连接可能会出现无法使用密码登录的情况，因此最好创建一个新的用户。</p><ol><li>首先使用sudo权限进入mysql；<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql</span><br></pre></td></tr></table></figure></li><li>进入mysql后，创建一个新的用户，并且设置为使用密码作为认证方式；<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;userName&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;passwd&#x27;</span>;</span><br></pre></td></tr></table></figure>上述命令中，%表示IP任意，<code>userName</code>和<code>passwd</code>修改为自己的用户名和密码。</li><li>赋予刚刚创建的用户所有数据库的权限，使之成为新的管理用户；<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;userName&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br></pre></td></tr></table></figure></li><li>刷新mysql访问权限，退出mysql。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br><span class="line">EXIT;</span><br></pre></td></tr></table></figure>到此为止我们就实现了服务器端mysql的安装，并且能够远程连接了。<h2 id="服务器安装Django环境"><a href="#服务器安装Django环境" class="headerlink" title="服务器安装Django环境"></a>服务器安装Django环境</h2></li></ol><p>在本步骤中我们将在服务器搭建Django，并且采用Miniconda来对环境进行管理。</p><h3 id="Miniconda"><a href="#Miniconda" class="headerlink" title="Miniconda"></a>Miniconda</h3><p>介绍一下，Conda是在Windows、macOS和Linux上运行的开源软件包管理系统和环境管理系统。Conda可以快速安装、运行和更新软件包及其依赖项。Conda可以轻松地在本地计算机上的环境中创建，保存，加载和切换。它是为Python程序创建的，但可以打包和分发适用于任何语言的软件。</p><p>因此我们选择安装Anaconda或者Miniconda来管理服务器的Python环境，我选择的是Miniconda(问就是没钱)。</p><ol><li><p>你可以在清华镜像下载对应的Miniconda安装包。<a class="btn-beautify outline" href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/"   title="下载Miniconda"><i class="far fa-hand-point-right"></i><span>下载Miniconda</span></a></p></li><li><p>在本地用powershell输入如下指令将下载好的安装包上传到服务器；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp /path takune@0.0.0.0:/home/takune/</span><br></pre></td></tr></table></figure><p>将上述指令中的<code>/path</code>替换为Miniconda安装包的路径，<code>takune</code>替换为你的服务器用户名，<code>0.0.0.0</code>替换为你的服务器的IP地址。</p></li><li><p>登录服务器使用如下指令进行miniconda的安装；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash name   # 将name替换为Miniconda安装包的名字</span><br></pre></td></tr></table></figure><p>然后按照提示一路安装即可。</p></li></ol><h3 id="搭建Django环境"><a href="#搭建Django环境" class="headerlink" title="搭建Django环境"></a>搭建Django环境</h3><ol><li>使用conda指令创建一个django环境(使用的是python3.8版本)；<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name django python=3.8 </span><br></pre></td></tr></table></figure>这样就完成了服务器Django环境的相关配置了，然后将你的后端项目上传即可。<h2 id="配置uWSGI"><a href="#配置uWSGI" class="headerlink" title="配置uWSGI"></a>配置uWSGI</h2></li></ol><p>介绍：uWSGI可以理解为一个可持续运行的后端的服务器模块，可以修改相关配置文件指定进程、线程的最大数量。</p><p>使用conda指令安装uWSGI：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -c conda-forge uwsgi</span><br></pre></td></tr></table></figure><br>按照提示进行相关配置即可</p><h2 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h2><ol><li>下载Nginx；<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure></li><li>启动Nginx服务；<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start nginx</span><br></pre></td></tr></table></figure></li></ol><h2 id="部署前端"><a href="#部署前端" class="headerlink" title="部署前端"></a>部署前端</h2><p>配置完成Nginx后,打开Nginx文件夹下的<code>nginx.conf</code>文件,其内容有如下一行:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include /etc/nginx/conf.d/*.conf;</span><br></pre></td></tr></table></figure><br>因为该文件include了文件夹<code>conf.d</code>中所有后缀为<code>.conf</code>的文件,所以我们只要在文件夹<code>conf.d</code>中添加对应的<code>.conf</code>文件即可。因此我们需要新建<code>web.conf</code>，并将如下内容复制到其中：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name 00.000.00.00;   # add your server IP if you haven&#x27;t domain</span><br><span class="line">    # if you have domain, use this</span><br><span class="line">    # listen 443 ssl;</span><br><span class="line">    # server_name  your domain name;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root /home/takune/fronted-demo; # It&#x27;s your fronted-demo path</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">        try_files $uri $uri/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /api &#123;        </span><br><span class="line">        include /etc/nginx/uwsgi_params;</span><br><span class="line">        uwsgi_pass 127.0.0.1:8080;                                                               </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # ssl_certificate /etc/nginx/ssl/zewan.top.crt;</span><br><span class="line">    # ssl_certificate_key /etc/nginx/ssl/zewan.top.key;</span><br><span class="line">    # ssl_session_timeout  5m;</span><br><span class="line">    # ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    # ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;</span><br><span class="line">    # ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    error_page 497  https://$host$uri?$args;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><br>保存并且退出，使用如下指令检查相关配置和重启服务：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -t           # 检查nginx是否存在错误</span><br><span class="line">sudo nginx -s reload    # 重启nginx服务  </span><br></pre></td></tr></table></figure><br>到此我们就成功将前端部署到服务器上。</p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Socket通信详解</title>
      <link href="/2022/06/26/Java-Socket%E9%80%9A%E4%BF%A1%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/06/26/Java-Socket%E9%80%9A%E4%BF%A1%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>最近在写的Java大作业中需要用到Java Socket通信，本文章在作业实践的基础上，将实践中学习的Socket通信的相关基础知识和遇到的难点进行记录和分析，并且给出解决办法。下面就是正片力！</p><h2 id="Socket是个什么东东？"><a href="#Socket是个什么东东？" class="headerlink" title="Socket是个什么东东？"></a>Socket是个什么东东？</h2><p>Socket的英文含义为插座，可谓是生动形象了。因为socket就像一个电话插座，负责联通两端的电话，进行点对点通信，此时端口就像插座上面的孔，端口不能同时被其它进程占用。而我们建立连接就像把插头插在插座上，这样在创建一个Socket实例开始监听接口后，这个电话插座就时刻监听消息的传入，谁连接上我的IP地址和端口，我就与其建立联系。</p><h2 id="Socket通信基本原理"><a href="#Socket通信基本原理" class="headerlink" title="Socket通信基本原理"></a>Socket通信基本原理</h2><p>Socket是基于应用服务与TCP/IP通信之间的一个抽象。Socket将TCP/IP通信协议里面复杂的通信逻辑进行了封装，因此对用户来说，只需要使用Socket提供的方法就可以实现网络的连接与通信。客户端和服务端之间使用Socket通信的流程图如下所示。<br><img src="https://s2.loli.net/2022/06/26/2w98aqkMlgxY5KI.png" alt="Socket通信图.png"></p><p>首先，服务器端初始化ServerSocket，然后对指定的端口进行监听，通过调用<code>Accept()</code>方法进行阻塞，此时，如果客户端有一个我socket连接到服务端，那么服务端通过监听和<code>Accept()</code>方法可以与客户端进行连接。</p><h2 id="Socket通信中最基本的代码示例"><a href="#Socket通信中最基本的代码示例" class="headerlink" title="Socket通信中最基本的代码示例"></a>Socket通信中最基本的代码示例</h2><p>通过前两个部分对于Socket的讲解，相信你已经对Socket通信的基本原理已经有所了解，现在我们就开始愉快地敲代码吧！<br><div class="tabs" id="code1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#code1-1">服务端</button></li><li class="tab"><button type="button" data-href="#code1-2">客户端</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="code1-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="comment">//服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerSocketTest</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化服务端socket并且绑定9999端口</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line">        <span class="comment">//等待客户端的连接</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">        <span class="comment">//获取输入流</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line">        <span class="comment">//读取一行数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> bufferedReader.readLine();</span><br><span class="line">        <span class="comment">//输出打印</span></span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="code1-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientSocket</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">9999</span>);</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(socket.getOutputStream()));</span><br><span class="line">        String str=<span class="string">&quot;你好，这是我的第一个socket&quot;</span>;</span><br><span class="line">        bufferedWriter.write(str);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p><p>将代码复制并且运行，首先启动服务端ServerSocket的main函数，发现一切正常，其在等待客户端的连接：</p><p><img src="https://s2.loli.net/2022/06/26/Sn9YvsKrNoHbRUT.png" alt="服务端终端输出1.png"></p><p>然后再启动客户端，发现客户端可以正常启动，执行完之后马上关闭，同时服务端控制台报出以下错误：</p><p><img src="https://s2.loli.net/2022/06/26/Zyvg2XdtoAIHMOB.png" alt="服务端终端输出2.png"></p><p>出现如上报错的原因如下：首先socket通信时阻塞的，其会在以下几个地方进行阻塞：首先是<code>accept()</code>方法，服务端调用此方法后，会一直阻塞在那里，直到有客户端申请连接服务端；第二个是<code>read()</code>方法，调用<code>read()</code>方法也可以进行阻塞。通过以上代码实例可以发现，这个报错的罪魁祸首其实就是服务端的<code>read()</code>方法。首先通过调试功能测试客户端的运行没有问题，客户端确确实实把信息发送出去了。因此问题一定在服务端上面。当服务端调用<code>read()</code>方法后，它就会一直阻塞在那里，直到客户端把数据发送完毕。但是在这个代码示例中客户端并没有给服务端一个标识，使得服务端能够判断客户端消息是否已经发送完毕，所以在客户端关闭之后服务端依旧阻塞在<code>read()</code>方法处等待客户端的数据，因此才会报错<code>java.net.SocketException: Connection reset</code>。</p><p>当然解决上面的问题方法其实很简单，只需要我们能够在客户端传输消息完毕后给服务端一个标识证明信息传输完成，那么服务端就可以正常工作了。而完成这种功能的方法通常有下面两种：</p><ul><li><code>socket.close()</code>：关闭socket连接，此时如果服务端给客户端反馈信息的话，由于socket连接已经关闭，此时客户端是收不到的。</li><li><code>socket.shutdownOutput()</code>：该方法只是关闭输出流，不会关闭socket连接，所以客户端依旧可以收到服务端的反馈信息。</li></ul><p>因此只要我们在以上代码中客户端的部分增加一个标识就行了。更新后的代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientSocket</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">9999</span>);</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(socket.getOutputStream()));</span><br><span class="line">        String str=<span class="string">&quot;你好，这是我的第一个socket&quot;</span>;</span><br><span class="line">        bufferedWriter.write(str);</span><br><span class="line">        <span class="comment">// 刷新输入流</span></span><br><span class="line">        bufferedWriter.flush();</span><br><span class="line">        <span class="comment">//关闭socket的输出流</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先后运行服务端和客户端后，客户端正常结束，服务端的终端输出如下所示：</p><p><img src="https://s2.loli.net/2022/06/26/hpu39nPKvjgyE6W.png" alt="服务端终端输出3.png"></p><p>通过分析以上案例，相信聪明的你已经基本了解了socket的通信原理了吧，下面就让我们来了解一些socket通信进阶版的写法吧。</p><h2 id="Socket通信实现连续接受客户端信息"><a href="#Socket通信实现连续接受客户端信息" class="headerlink" title="Socket通信实现连续接受客户端信息"></a>Socket通信实现连续接受客户端信息</h2><p>上面的代码示例中的socket客户端和服务端固然可以实现通信但是每次客户端发送消息后socket都会关闭，这显然和我们平时用到的在线聊天软件的功能差了十万八千里，毕竟没有什么软件需要在每次发送消息前都要登录。那么如何才能让我们的程序中的客户端可以连续给服务器端发送消息呢？答案是通过在服务端和客户端添加<code>while()</code>循环来实现这个功能。</p><div class="tabs" id="code2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#code2-1">服务端</button></li><li class="tab"><button type="button" data-href="#code2-2">客户端</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="code2-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="comment">//服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerSocketTest</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化服务端socket并且绑定9999端口</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line">        <span class="comment">//等待客户端的连接</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">        <span class="comment">//获取输入流</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream(),<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        <span class="comment">//读取一行数据</span></span><br><span class="line">        String str;</span><br><span class="line">        <span class="comment">//通过while循环不断读取打印信息</span></span><br><span class="line">        <span class="keyword">while</span>((str = bufferedReader.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//打印输出信息</span></span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="code2-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientSocket</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String str;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">9999</span>);</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(socket.getOutputStream()));</span><br><span class="line">        <span class="comment">//通过标准输入流获取字符流</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            str = bufferedReader.readLine();</span><br><span class="line">            bufferedWriter.write(str);</span><br><span class="line">            bufferedWriter.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            bufferedWriter.flush();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>先后启动服务端和客户端，在客户端控制台输入信息，即可在服务端控制台查看到相关消息。</p><ul><li>客户端控制台输入：</li></ul><p><img src="https://s2.loli.net/2022/06/26/kWCvYF8UuKJH4MS.png" alt="客户端输入1.png"></p><ul><li>服务端控制台输出：</li></ul><p><img src="https://s2.loli.net/2022/06/26/JHhxjiAPYsTWF3O.png" alt="服务端控制台输出4.png"></p><p>通过如上两个图，我们可以看到通过<code>while()</code>循环就可以实现客户端不间断地通过标准输入流读取消息，并且发送给服务端。此时你或许会注意到，这次客户端中没有写<code>socket.close()</code>方法或<code>socket.shutdownOutput()</code>方法，那么服务端是怎么样判断客户端已经输入完成了呢？其实程序是通过客户端和用户端双方事先约定好一个标识符，当客户端发送这个标识符给服务端时，就表明客户端已经完成一个数据的传输。而在服务端接收数据的时候，也会通过这个标识符来判断，如果接收到这个标识符，就说明一次数据传输已经完成，那么服务端就可以放手干后面的活儿了。</p><p>比如说在上面地实例中，客户端每发送一行数据时，都会在最后增加一个标识符”\n”，告诉服务端数据已经传输完成。然后又通过<code>while((str = bufferedReader.readLine())!=null)</code>去判断是否读到了流的结尾，负责将服务端一直阻塞在这里，等待客户端数据传输完成。</p><p>当你看到这儿，恭喜你已经可以通过<code>while()</code>循环来实现多个客户端和服务端进行聊天了，可喜可贺！但是还是存在一些问题，我们之前讨论过socket的通信是阻塞式的，所以就会存在以下问题：假如说存在客户端A和客户端B，它们同时连接到服务端上，当客户端A发送的信息被服务端接收后，那么服务端将会一直被阻塞在客户端A上面，通过循环一直读取A的输入，假如此时用户端B尝试传输数据，就会被加入到阻塞队列中，直到服务端处理完客户端A传输的信息时，服务端才能建立与客户端B的通信。因此我们此时写的程序在事实上只是实现了客户端与服务端一对一的功能，因为只有在客户端A关闭后，客户端B才能和服务端建立连接，这明显不是我们想要的。</p><h2 id="多线程下的Socket通信"><a href="#多线程下的Socket通信" class="headerlink" title="多线程下的Socket通信"></a>多线程下的Socket通信</h2><p>为了解决上面所说的问题，实现真正意义上的多客户端与服务端的连接，我们将采用多线程的方法实现Socket通信。</p><div class="tabs" id="code3"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#code3-1">服务端</button></li><li class="tab"><button type="button" data-href="#code3-2">客户端</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="code3-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="comment">//服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerSocketTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//初始化服务器端并且绑定9999端口</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">//等待客户端连接</span></span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">            <span class="comment">//对于每一个进来的客户端都创建一个线程进行处理</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">ListenServer</span>(socket)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListenServer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListenServer</span><span class="params">(Socket socket)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            bufferedReader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream(),<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            <span class="comment">//读取一行数据</span></span><br><span class="line">            String str;</span><br><span class="line">            <span class="comment">//通过循环不断获取客户端传输过来的信息</span></span><br><span class="line">            <span class="keyword">while</span>((str = bufferedReader.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;客户端说：&quot;</span>+str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="code3-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientSocket</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 初始化服务</span></span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">9999</span>);</span><br><span class="line">            <span class="comment">//通过socket获取字符流</span></span><br><span class="line">            <span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(socket.getOutputStream()));</span><br><span class="line">            <span class="comment">//通过标准输入获取字符流</span></span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> bufferedReader.readLine();</span><br><span class="line">                bufferedWriter.write(str);</span><br><span class="line">                bufferedWriter.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                bufferedWriter.flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>开启服务端后再开启两个客户端，分别输入一些信息后控制台输出如下所示：</p><p><img src="https://s2.loli.net/2022/06/26/6lYazqUfhWMBFp5.png" alt="服务端控制台输出5.png"></p><p>通过这个实例测试我们发现，这时我们的程序中，客户端A和客户端B再同时连接到服务器端后，都可以与服务端进行通信，这样就杜绝了之前出现的A和B不能同时与服务端进行通信的情况。实现这种的功能的主要功臣就是服务端会为每一个请求连接的客户端创建一个单独的线程，与客户端进行数据交互，这样就保证了每个客户端处理数据时都是单独的，不会出现互相阻塞的情况，这样的话我们就实现了多对多的基本聊天功能了，可喜可贺！</p><p>但是，这种写法只是对于连接进来的客户端数量较少时才没有问题，假如说要为每一个客户端创建线程，但是此时成百上千的客户端连接到服务端时，我们那可怜的服务端是肯定承受不了的。为了解决这个问题，我们可以通过线程池技术来保证线程的复用，以下是采用线程池改良后的服务端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.beans.Encoder;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="comment">//服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerSocket</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//初始化服务端socket并且绑定9999端口</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line">        <span class="comment">//创建一个线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">//等待客户端连接</span></span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">            executorService.submit(<span class="keyword">new</span> <span class="title class_">ListenServer</span>(socket));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListenServer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListenServer</span><span class="params">(Socket socket)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bufferedReader =<span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream(), <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            <span class="comment">//读取一行数据</span></span><br><span class="line">            String str;</span><br><span class="line">            <span class="comment">//通过while循环不断读取信息</span></span><br><span class="line">            <span class="keyword">while</span>((str = bufferedReader.readLine()) != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;客户端说：&quot;</span>+str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然还是存在一些问题，在实际应用中，socket传输的数据往往不是按照一行一行来发送的，所以我们不能够要求每一次发送数据都要加一个”\n”标识符。为了让服务端知道数据是否传输完毕，最常用的方法是<mark class="hl-label red">数据长度+类型+数据</mark> 。</p><h2 id="Socket传输指定长度的数据"><a href="#Socket传输指定长度的数据" class="headerlink" title="Socket传输指定长度的数据"></a>Socket传输指定长度的数据</h2><p>由于Socket通信时我们发送的数据常常是不定长的，因此经常会出现如下问题：</p><h3 id="半包"><a href="#半包" class="headerlink" title="半包"></a>半包</h3><p>接收方没有接收到一个完整的包，只接受了一部分。</p><p>原因：TCP为了提高传输效率，将一个包分配得足够大，导致接收方一次没办法接受完。</p><p>影响：长连接和短连接中都会出现</p><h3 id="粘包"><a href="#粘包" class="headerlink" title="粘包"></a>粘包</h3><p>发送方发送的多个包数据到接收方接收时粘成一个包，从接收缓冲区看，后一包数据的头紧接着前一包数据的尾。</p><p>分类：一种是粘在一起得包都是完整的数据包，另一种是粘在一起的包中有不完整得包。</p><h3 id="分包"><a href="#分包" class="headerlink" title="分包"></a>分包</h3><ul><li>在出现粘包的时候，我们的接收方需要进行分包处理；</li><li>一个数据包被分为多次接收；</li></ul><p>原因：</p><ol><li>IP分片传输导致的问题；</li><li>传输过程中丢失部分包导致出现半包；</li><li>一个包可能被分成两次传输，在取数据时，先取到一部分（这个可能与接收的缓冲区大小有关系）。</li></ol><p>影响：粘包和分包在长连接中都会出现。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>为了解决半包和粘包的问题，就涉及数据发送如何标识结束的问题，通常情况下有以下几个办法：</p><ol><li>固定长度：每次发送固定长度的数据；</li><li>特殊标识：以回车，换行等作为特殊标识；获取特殊标识时，说明包获取完整；</li><li>包头+包长+包体的协议形式，当服务器获取指定的包长时才说明获取完整；</li></ol><p>所以大部分情况下，双方使用socket通讯时都会约定一个定长头放在传输数据的最前端，用以标识数据体的长度，通常定长头有整型int，短整型short，字符串Strinng三种形式。其中我采用的是使用JSON格式进行数据传输，从分类上看类似于特殊标识法(<code>&#123;&#125;</code>之间为一个包)，只要事先导入对应的jar包即可使用。代码与上面的相差不大，在这里就不写了。</p><h2 id="Socket的长连接和短连接"><a href="#Socket的长连接和短连接" class="headerlink" title="Socket的长连接和短连接"></a>Socket的长连接和短连接</h2><p>在对这部分进行说明时，我们先详细了解一下长连接和短链接的相关概念。</p><h3 id="长连接"><a href="#长连接" class="headerlink" title="长连接"></a>长连接</h3><p>指在一个连接上面可以连续发送多个数据包，在连接保持期间，如果没有数据包发送，需要双方发送链路检测包。整个通讯过程中，客户端和服务端只有一个Socket对象，长期保持Socket的连接。适用于操作频繁，点对点的通讯，而且连接数量不会太多的情况。</p><h3 id="短连接"><a href="#短连接" class="headerlink" title="短连接"></a>短连接</h3><p>短连接服务就是每次请求都要建立连接，客户端与服务端交互完毕后关闭连接。</p><h3 id="心跳包"><a href="#心跳包" class="headerlink" title="心跳包"></a>心跳包</h3><p>实际上在实际应用中的长连接也不是实际意义上的长连接，它是通过一种叫心跳包(链路检测包)的东西去检查Socket和输入/输出流是否关闭来维系长连接的。</p><h2 id="Socket中长连接的实现方法"><a href="#Socket中长连接的实现方法" class="headerlink" title="Socket中长连接的实现方法"></a>Socket中长连接的实现方法</h2><p>由于短连接每一次请求都要建立连接，这样的效率实在是太低了，TCP连接涉及三次握手以及四次握手，若每一个消息发送都要进行这些过程，就会非常浪费性能。因此我们选择通过心跳包建立长连接，这样即使服务端因为发生故障，在故障修复后客户端依旧能连接上服务端，相关代码如下：</p><div class="tabs" id="code4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#code4-1">服务端</button></li><li class="tab"><button type="button" data-href="#code4-2">客户端</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="code4-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.json.simple.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Socket服务器开始运行...&quot;</span>);</span><br><span class="line">            <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line">            <span class="comment">//创建线程池</span></span><br><span class="line">            <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">                executorService.submit( <span class="keyword">new</span> <span class="title class_">ListenServer</span>(socket) );</span><br><span class="line">                executorService.submit( <span class="keyword">new</span> <span class="title class_">ServerSend</span>(socket) );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListenServer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListenServer</span><span class="params">(Socket socket)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">oin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(socket.getInputStream());</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">                System.out.println(oin.readObject());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ServerSend</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServerSend</span><span class="params">(Socket socket)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(socket.getOutputStream());</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">                <span class="type">JSONObject</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">                obj.put(<span class="string">&quot;type&quot;</span>,<span class="string">&quot;chat&quot;</span>);</span><br><span class="line">                obj.put(<span class="string">&quot;msg&quot;</span>,string);</span><br><span class="line">                oout.writeObject(object);</span><br><span class="line">                oout.flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="code4-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.json.simple.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Socket socket;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">connection_state</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(connect())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端连接成功......&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            reConnect();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket = <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9999</span>);</span><br><span class="line">            connection_state = <span class="literal">true</span>;</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(socket.getOutputStream());</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">oout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(socket.getInputStream());</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">ClientListen</span>(socket,oin)).start();</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">ClientSend</span>(socket,oout)).start();</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">ClientHeart</span>(socket,oout)).start();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            connection_state = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reconnect</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!connection_state)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;正在尝试重新链接.....&quot;</span>);</span><br><span class="line">            connect();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClientListen</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line">    <span class="keyword">private</span> ObjectInputStream oin;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClientListen</span><span class="params">(Socket socket,ObjectInputStream oin)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.socket = socket;</span><br><span class="line">        <span class="built_in">this</span>.oin = oin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                System.out.println(oin.readObject());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClientSend</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line">    <span class="keyword">private</span> ObjectOutputStream oout;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClientSend</span><span class="params">(Socket socket, ObjectOutputStream oout)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.socket = socket;</span><br><span class="line">        <span class="built_in">this</span>.oout = oout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">                <span class="type">JSONObject</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">                obj.put(<span class="string">&quot;type&quot;</span>,<span class="string">&quot;chat&quot;</span>);</span><br><span class="line">                obj.put(<span class="string">&quot;msg&quot;</span>,string);</span><br><span class="line">                oout.writeObject(object);</span><br><span class="line">                oout.flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClientHeart</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line">    <span class="keyword">private</span> ObjectOutputStream oout;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Client_heart</span><span class="params">(Socket socket, ObjectOutputStream oout)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.socket = socket;</span><br><span class="line">        <span class="built_in">this</span>.oout = oout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;心跳包线程已启动...&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                <span class="type">JSONObject</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">                obj.put(<span class="string">&quot;type&quot;</span>,<span class="string">&quot;heart&quot;</span>);</span><br><span class="line">                obj.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;心跳包&quot;</span>);</span><br><span class="line">                oout.writeObject(object);</span><br><span class="line">                oout.flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">                Client.connection_state = <span class="literal">false</span>;</span><br><span class="line">                Client.reconnect();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e1)&#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>经过检测后发现客户端能够在服务端重启后重新连接上服务端。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>至此我们就真正通过Java编程实现了多个客户端长连接服务端的Socket通信，剩下的就是在这个基础上堆加更多的功能了，比如说用户相关的登录注册功能等，发送语音图片等功能就可以在这基础上完成了。</p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习笔记</title>
      <link href="/2022/05/09/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/05/09/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><h3 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h3><h3 id="编程小技巧"><a href="#编程小技巧" class="headerlink" title="编程小技巧"></a>编程小技巧</h3><ul><li>如何打空格: 使用<code>&amp;nbsp;</code>即可在页面中显示空格(注意分号┭┮﹏┭┮)</li></ul><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><p>CSS中的盒子模型如下图所示:<br><img src="https://s2.loli.net/2022/05/09/kBuqSKvbzJHFMIP.png" alt="盒子模型"></p><h3 id="CSS定位"><a href="#CSS定位" class="headerlink" title="CSS定位"></a>CSS定位</h3><p>CSS中的定位用于对页面中的元素进行布局,常见的定位有以下几种:</p><ol><li>静态定位(static)<br>一般标签元素在不加任何定位属性时都属于静态定位,属于标准流。</li><li>绝对定位(absolute)<br>绝对定位会将指定元素从文档流中拿出,再通过位移属性相对于其最近的已定位祖先元素(该祖先元素的position设置为relative)。<div class="note info simple"><p>因为绝对定位的框与文档流无关，所以它们可以覆盖页面上的其它元素。可以通过设置 z-index 属性来控制这些框的堆放次序。</p></div></li><li>相对定位(relative)<br>相对定位是相对于该元素在正常文件流中的位置,通过设置的位移属性计算得到。<div class="note warning simple"><p>该元素仍然保持其未定位前的形状，它原本所占的空间仍保留</p></div></li><li>固定定位(fixed)<br>与绝对定位类似,但它是相对于浏览器窗口定位,不会随滚动条进行滚动。</li><li>粘性定位(sticky)<br>粘性定位可以被认为是相对定位和固定定位的混合。简单来说，在滑动过程中，某个元素距离其父元素的距离达到 sticky粘性定位的要求时(比如top：100px)；position:sticky这时的效果相当于fixed定位，固定到适当位置</li></ol>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue框架学习</title>
      <link href="/2022/05/08/Vue%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/05/08/Vue%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue基础语法"><a href="#Vue基础语法" class="headerlink" title="Vue基础语法"></a>Vue基础语法</h2><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><p>  Vue中的数据绑定有以下两种方式:</p><ol><li>单向绑定(v-bind): 数据只能从data流向页面,当data中被绑定变量的内容改变时,这种改变会实时展示在页面上。</li><li>双向绑定(v-model): 数据在data和页面之间双向流通。</li></ol><div class="note warning simple"><p>双向绑定一般都应用在表单元素上(input,select等)</p></div><div class="note info simple"><p>v-model:value 可以简写成v-model,因为v-model默认收集的就是value值</p></div><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><h4 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h4><p>Vue主要使用<mark class="hl-label red">v-on</mark> 监听事件,调用相应函数对用户的交互作出回应。<br>以下为事件处理的基本要点:</p><ol><li>使用<code>v-on:xxx</code>或<code>@xxx</code>来绑定事件,其中<mark class="hl-label blue">xxx</mark> 是事件名</li><li>事件的函数需要配置在methods对象中,最终在vm上</li><li>methods对象中的函数都在Vue的管理之下,因此函数中的<mark class="hl-label orange">this</mark> 指向的是vm或组件的实例对象</li><li><code>@click=&quot;demo&quot;</code>和<code>@click=&quot;demo($event)&quot;</code>效果一致,但是后者可以传参</li></ol><h5 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h5><p>Vue中的事件修饰符:</p><ol><li>.prevent: 阻止默认事件;</li><li>.stop: 阻止事件冒泡;</li><li>.once: 事件只触发一次;</li><li>.capture: 使用事件的捕获模式;</li><li>.self: 只有event.target是当前操作的元素时才能触发事件;</li><li>.passive: 事件默认立即执行,无需等待事件回调执行完毕;</li></ol><p>前三个事件修饰符是常用的,可以重点记一下。</p><h5 id="Vue中常用的按键别名"><a href="#Vue中常用的按键别名" class="headerlink" title="Vue中常用的按键别名"></a>Vue中常用的按键别名</h5><ol><li>回车: enter</li><li>删除: delete(捕获”删除”和”退格”)</li><li>退出: esc</li><li>空格: space</li><li>换行: tab(必须配合keydown使用)</li><li>上: up</li><li>下: down</li><li>左: left</li><li>右: right</li></ol><h5 id="Vue中的系统修饰键-ctrl-alt-shift-meta"><a href="#Vue中的系统修饰键-ctrl-alt-shift-meta" class="headerlink" title="Vue中的系统修饰键:ctrl,alt,shift,meta"></a>Vue中的系统修饰键:ctrl,alt,shift,meta</h5><ol><li>配合keyup使用: 按下修饰键的同时,再按下其他键,随后释放其他键,才会触发绑定事件</li><li>配合keydown使用: 正常触发绑定事件</li></ol><div class="note info simple"><p>Vue中未提供别名的按键,可以使用按键原始的key值去绑定,格式为kebab-case(短横线命名)</p></div>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
